/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ChildSites} from '../model/ChildSites';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse200102} from '../model/InlineResponse200102';
import {InlineResponse200106} from '../model/InlineResponse200106';
import {InlineResponse200118} from '../model/InlineResponse200118';
import {InlineResponse200120} from '../model/InlineResponse200120';
import {InlineResponse200121} from '../model/InlineResponse200121';
import {InlineResponse200122} from '../model/InlineResponse200122';
import {InlineResponse200134} from '../model/InlineResponse200134';
import {InlineResponse200135} from '../model/InlineResponse200135';
import {InlineResponse200141} from '../model/InlineResponse200141';
import {InlineResponse200143} from '../model/InlineResponse200143';
import {InlineResponse200146} from '../model/InlineResponse200146';
import {InlineResponse200147} from '../model/InlineResponse200147';
import {InlineResponse200148} from '../model/InlineResponse200148';
import {InlineResponse200149} from '../model/InlineResponse200149';
import {InlineResponse200152} from '../model/InlineResponse200152';
import {InlineResponse200162} from '../model/InlineResponse200162';
import {InlineResponse200163} from '../model/InlineResponse200163';
import {InlineResponse200164} from '../model/InlineResponse200164';
import {InlineResponse200165} from '../model/InlineResponse200165';
import {InlineResponse200166} from '../model/InlineResponse200166';
import {InlineResponse200167} from '../model/InlineResponse200167';
import {InlineResponse200168} from '../model/InlineResponse200168';
import {InlineResponse200169} from '../model/InlineResponse200169';
import {InlineResponse200170} from '../model/InlineResponse200170';
import {InlineResponse200172} from '../model/InlineResponse200172';
import {InlineResponse200173} from '../model/InlineResponse200173';
import {InlineResponse20018} from '../model/InlineResponse20018';
import {InlineResponse200184} from '../model/InlineResponse200184';
import {InlineResponse200185} from '../model/InlineResponse200185';
import {InlineResponse200186} from '../model/InlineResponse200186';
import {InlineResponse20019} from '../model/InlineResponse20019';
import {InlineResponse20020} from '../model/InlineResponse20020';
import {InlineResponse20021} from '../model/InlineResponse20021';
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponse20035} from '../model/InlineResponse20035';
import {InlineResponse20040} from '../model/InlineResponse20040';
import {InlineResponse20042} from '../model/InlineResponse20042';
import {InlineResponse20046} from '../model/InlineResponse20046';
import {InlineResponse20050} from '../model/InlineResponse20050';
import {InlineResponse20051} from '../model/InlineResponse20051';
import {InlineResponse20052} from '../model/InlineResponse20052';
import {InlineResponse20059} from '../model/InlineResponse20059';
import {InlineResponse20061} from '../model/InlineResponse20061';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse20081} from '../model/InlineResponse20081';
import {InlineResponse20083} from '../model/InlineResponse20083';
import {InlineResponse20087} from '../model/InlineResponse20087';
import {InlineResponse20088} from '../model/InlineResponse20088';
import {InlineResponse20089} from '../model/InlineResponse20089';
import {InlineResponse2009} from '../model/InlineResponse2009';
import {InlineResponse20090} from '../model/InlineResponse20090';
import {InlineResponse20091} from '../model/InlineResponse20091';
import {InlineResponse20092} from '../model/InlineResponse20092';
import {InlineResponse20093} from '../model/InlineResponse20093';
import {InlineResponse20094} from '../model/InlineResponse20094';
import {InlineResponse20095} from '../model/InlineResponse20095';
import {InlineResponse20096} from '../model/InlineResponse20096';
import {InlineResponse20097} from '../model/InlineResponse20097';
import {InlineResponse20114} from '../model/InlineResponse20114';
import {InlineResponse20115} from '../model/InlineResponse20115';
import {InlineResponse2014} from '../model/InlineResponse2014';
import {LicenseInformations} from '../model/LicenseInformations';
import {LicenseInformationsIdBody} from '../model/LicenseInformationsIdBody';
import {LoginProviders} from '../model/LoginProviders';
import {Owner} from '../model/Owner';
import {OwnerIdBody} from '../model/OwnerIdBody';
import {PatrollingProfiles} from '../model/PatrollingProfiles';
import {PatrollingProfilesIdBody} from '../model/PatrollingProfilesIdBody';
import {RegisteredClaims} from '../model/RegisteredClaims';
import {Sites} from '../model/Sites';
import {SitesBody} from '../model/SitesBody';
import {ToolOptions} from '../model/ToolOptions';

/**
* Core service.
* @module api/CoreApi
* @version 1.0.0
*/
export class CoreApi {

    /**
    * Constructs a new CoreApi. 
    * @alias module:api/CoreApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteloginProvidersById operation.
     * @callback moduleapi/CoreApi~deleteloginProvidersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a loginProviders
     * External IDP
     * @param {String} id Id of the object
     * @param {module:api/CoreApi~deleteloginProvidersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteloginProvidersById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteloginProvidersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20114;

      return this.apiClient.callApi(
        '/loginProviders/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteloginProvidersByIdregisteredClaims operation.
     * @callback moduleapi/CoreApi~deleteloginProvidersByIdregisteredClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a registeredClaims from a loginProviders
     * External IDP
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/CoreApi~deleteloginProvidersByIdregisteredClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteloginProvidersByIdregisteredClaims(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleteloginProvidersByIdregisteredClaims");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteloginProvidersByIdregisteredClaims");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20115;

      return this.apiClient.callApi(
        '/loginProviders/{idParent}/registeredClaims/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllTranslations operation.
     * @callback moduleapi/CoreApi~getAllTranslationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200186{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get list of all translations for one language
     * Get list of all translations for one language
     * @param {String} language Select what language to translate to, e.g. en-us
     * @param {module:api/CoreApi~getAllTranslationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllTranslations(language, callback) {
      
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling getAllTranslations");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'language': language
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200186;

      return this.apiClient.callApi(
        '/translations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaccessControlSystemsInAsites operation.
     * @callback moduleapi/CoreApi~getAllaccessControlSystemsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all accessControlSystems
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllaccessControlSystemsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaccessControlSystemsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllaccessControlSystemsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/sites/{id}/accessControlSystems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllalarmDefinitionsInAsites operation.
     * @callback moduleapi/CoreApi~getAllalarmDefinitionsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all alarmDefinitions
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllalarmDefinitionsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllalarmDefinitionsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllalarmDefinitionsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/sites/{id}/alarmDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllanalyticsEventsInAsites operation.
     * @callback moduleapi/CoreApi~getAllanalyticsEventsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all analyticsEvents
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllanalyticsEventsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllanalyticsEventsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllanalyticsEventsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/sites/{id}/analyticsEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllbasicUsersInAsites operation.
     * @callback moduleapi/CoreApi~getAllbasicUsersInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all basicUsers
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllbasicUsersInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllbasicUsersInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllbasicUsersInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/sites/{id}/basicUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcameraGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllcameraGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all cameraGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllcameraGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcameraGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcameraGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/sites/{id}/cameraGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllchildSites operation.
     * @callback moduleapi/CoreApi~getAllchildSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Child sites
     * Child sites
     * @param {module:api/CoreApi~getAllchildSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllchildSites(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/childSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllchildSitesInAchildSites operation.
     * @callback moduleapi/CoreApi~getAllchildSitesInAchildSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all childSites
     * Child sites
     * @param {String} id Id of the childSite object
     * @param {module:api/CoreApi~getAllchildSitesInAchildSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllchildSitesInAchildSites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllchildSitesInAchildSites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/childSites/{id}/childSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllchildSitesInAsites operation.
     * @callback moduleapi/CoreApi~getAllchildSitesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200146{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all childSites
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllchildSitesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllchildSitesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllchildSitesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200146;

      return this.apiClient.callApi(
        '/sites/{id}/childSites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientProfilesInAsites operation.
     * @callback moduleapi/CoreApi~getAllclientProfilesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20042{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all clientProfiles
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllclientProfilesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientProfilesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclientProfilesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/sites/{id}/clientProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlleventTypeGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAlleventTypeGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20046{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all eventTypeGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlleventTypeGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlleventTypeGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlleventTypeGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046;

      return this.apiClient.callApi(
        '/sites/{id}/eventTypeGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllfailoverGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllfailoverGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all failoverGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllfailoverGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllfailoverGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllfailoverGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20052;

      return this.apiClient.callApi(
        '/sites/{id}/failoverGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgenericEventDataSourcesInAsites operation.
     * @callback moduleapi/CoreApi~getAllgenericEventDataSourcesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20059{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all genericEventDataSources
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllgenericEventDataSourcesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgenericEventDataSourcesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllgenericEventDataSourcesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20059;

      return this.apiClient.callApi(
        '/sites/{id}/genericEventDataSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgenericEventsInAsites operation.
     * @callback moduleapi/CoreApi~getAllgenericEventsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all genericEvents
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllgenericEventsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgenericEventsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllgenericEventsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/sites/{id}/genericEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgisMapLocationsInAsites operation.
     * @callback moduleapi/CoreApi~getAllgisMapLocationsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20061{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all gisMapLocations
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllgisMapLocationsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgisMapLocationsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllgisMapLocationsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20061;

      return this.apiClient.callApi(
        '/sites/{id}/gisMapLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEventGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllinputEventGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all inputEventGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllinputEventGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEventGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllinputEventGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/sites/{id}/inputEventGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllayoutGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAlllayoutGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all layoutGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlllayoutGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllayoutGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllayoutGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/sites/{id}/layoutGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllicenseDetailsInAlicenseInformations operation.
     * @callback moduleapi/CoreApi~getAlllicenseDetailsInAlicenseInformationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20091{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all licenseDetails
     * License information
     * @param {String} id Id of the licenseInformation object
     * @param {module:api/CoreApi~getAlllicenseDetailsInAlicenseInformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllicenseDetailsInAlicenseInformations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllicenseDetailsInAlicenseInformations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20091;

      return this.apiClient.callApi(
        '/licenseInformations/{id}/licenseDetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllicenseInformations operation.
     * @callback moduleapi/CoreApi~getAlllicenseInformationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all License information
     * License information
     * @param {module:api/CoreApi~getAlllicenseInformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllicenseInformations(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20087;

      return this.apiClient.callApi(
        '/licenseInformations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllicenseInformationsInAsites operation.
     * @callback moduleapi/CoreApi~getAlllicenseInformationsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20087{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all licenseInformations
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlllicenseInformationsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllicenseInformationsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllicenseInformationsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20087;

      return this.apiClient.callApi(
        '/sites/{id}/licenseInformations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllicenseInstalledProductsInAlicenseInformations operation.
     * @callback moduleapi/CoreApi~getAlllicenseInstalledProductsInAlicenseInformationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20092{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all licenseInstalledProducts
     * License information
     * @param {String} id Id of the licenseInformation object
     * @param {module:api/CoreApi~getAlllicenseInstalledProductsInAlicenseInformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllicenseInstalledProductsInAlicenseInformations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllicenseInstalledProductsInAlicenseInformations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20092;

      return this.apiClient.callApi(
        '/licenseInformations/{id}/licenseInstalledProducts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllicenseOverviewAllInAlicenseInformations operation.
     * @callback moduleapi/CoreApi~getAlllicenseOverviewAllInAlicenseInformationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20093{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all licenseOverviewAll
     * License information
     * @param {String} id Id of the licenseInformation object
     * @param {module:api/CoreApi~getAlllicenseOverviewAllInAlicenseInformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllicenseOverviewAllInAlicenseInformations(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllicenseOverviewAllInAlicenseInformations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20093;

      return this.apiClient.callApi(
        '/licenseInformations/{id}/licenseOverviewAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllloginProviders operation.
     * @callback moduleapi/CoreApi~getAllloginProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20094{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled External IDP
     * External IDP. To include disabled items add ?disabled to the request.
     * @param {module:api/CoreApi~getAllloginProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllloginProviders(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20094;

      return this.apiClient.callApi(
        '/loginProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllloginProvidersInAsites operation.
     * @callback moduleapi/CoreApi~getAllloginProvidersInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20094{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all loginProviders
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllloginProvidersInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllloginProvidersInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllloginProvidersInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20094;

      return this.apiClient.callApi(
        '/sites/{id}/loginProviders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllprMatchListsInAsites operation.
     * @callback moduleapi/CoreApi~getAlllprMatchListsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20097{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all lprMatchLists
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlllprMatchListsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllprMatchListsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllprMatchListsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20097;

      return this.apiClient.callApi(
        '/sites/{id}/lprMatchLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadataGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllmetadataGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all metadataGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllmetadataGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadataGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmetadataGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200102;

      return this.apiClient.callApi(
        '/sites/{id}/metadataGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophoneGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllmicrophoneGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all microphoneGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllmicrophoneGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophoneGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmicrophoneGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;

      return this.apiClient.callApi(
        '/sites/{id}/microphoneGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAlloutputGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all outputGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlloutputGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlloutputGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200118;

      return this.apiClient.callApi(
        '/sites/{id}/outputGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllowner operation.
     * @callback moduleapi/CoreApi~getAllownerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Basic Owner Information
     * Basic Owner Information
     * @param {module:api/CoreApi~getAllownerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllowner(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllownerInAsites operation.
     * @callback moduleapi/CoreApi~getAllownerInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all owner
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllownerInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllownerInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllownerInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20018;

      return this.apiClient.callApi(
        '/sites/{id}/owner', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllpatrollingProfiles operation.
     * @callback moduleapi/CoreApi~getAllpatrollingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Patrolling profile
     * Patrolling profile
     * @param {module:api/CoreApi~getAllpatrollingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllpatrollingProfiles(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/patrollingProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServersInAsites operation.
     * @callback moduleapi/CoreApi~getAllrecordingServersInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200122{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all recordingServers
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllrecordingServersInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServersInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllrecordingServersInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200122;

      return this.apiClient.callApi(
        '/sites/{id}/recordingServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllregisteredClaims operation.
     * @callback moduleapi/CoreApi~getAllregisteredClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Registered claims
     * Registered claims
     * @param {module:api/CoreApi~getAllregisteredClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllregisteredClaims(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20096;

      return this.apiClient.callApi(
        '/registeredClaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllregisteredClaimsInAloginProviders operation.
     * @callback moduleapi/CoreApi~getAllregisteredClaimsInAloginProvidersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20096{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all registeredClaims
     * External IDP
     * @param {String} id Id of the loginProvider object
     * @param {module:api/CoreApi~getAllregisteredClaimsInAloginProvidersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllregisteredClaimsInAloginProviders(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllregisteredClaimsInAloginProviders");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20096;

      return this.apiClient.callApi(
        '/loginProviders/{id}/registeredClaims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrolesInAsites operation.
     * @callback moduleapi/CoreApi~getAllrolesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200135{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all roles
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllrolesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrolesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllrolesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200135;

      return this.apiClient.callApi(
        '/sites/{id}/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrulesInAsites operation.
     * @callback moduleapi/CoreApi~getAllrulesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200141{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all rules
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllrulesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrulesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllrulesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200141;

      return this.apiClient.callApi(
        '/sites/{id}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsaveSearchesInAsites operation.
     * @callback moduleapi/CoreApi~getAllsaveSearchesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all saveSearches
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllsaveSearchesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsaveSearchesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsaveSearchesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200143;

      return this.apiClient.callApi(
        '/sites/{id}/saveSearches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsiteAddressesInAchildSites operation.
     * @callback moduleapi/CoreApi~getAllsiteAddressesInAchildSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200149{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all siteAddresses
     * Child sites
     * @param {String} id Id of the childSite object
     * @param {module:api/CoreApi~getAllsiteAddressesInAchildSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsiteAddressesInAchildSites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsiteAddressesInAchildSites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200149;

      return this.apiClient.callApi(
        '/childSites/{id}/siteAddresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsites operation.
     * @callback moduleapi/CoreApi~getAllsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200162{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Management Server
     * Management Server
     * @param {module:api/CoreApi~getAllsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsites(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200162;

      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakerGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllspeakerGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all speakerGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllspeakerGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakerGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllspeakerGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/sites/{id}/speakerGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsystemAddressesInAsites operation.
     * @callback moduleapi/CoreApi~getAllsystemAddressesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200166{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all systemAddresses
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllsystemAddressesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsystemAddressesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsystemAddressesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200166;

      return this.apiClient.callApi(
        '/sites/{id}/systemAddresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlltasks operation.
     * @callback moduleapi/CoreApi~getAlltasksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200184{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Tasks
     * Tasks
     * @param {module:api/CoreApi~getAlltasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlltasks(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200184;

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlltimeProfilesInAsites operation.
     * @callback moduleapi/CoreApi~getAlltimeProfilesInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200167{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all timeProfiles
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlltimeProfilesInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlltimeProfilesInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlltimeProfilesInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200167;

      return this.apiClient.callApi(
        '/sites/{id}/timeProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlltoolOptions operation.
     * @callback moduleapi/CoreApi~getAlltoolOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all System options
     * System options
     * @param {module:api/CoreApi~getAlltoolOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlltoolOptions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;

      return this.apiClient.callApi(
        '/toolOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlltoolOptionsInAsites operation.
     * @callback moduleapi/CoreApi~getAlltoolOptionsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200168{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all toolOptions
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlltoolOptionsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlltoolOptionsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlltoolOptionsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200168;

      return this.apiClient.callApi(
        '/sites/{id}/toolOptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlluserDefinedEventsInAsites operation.
     * @callback moduleapi/CoreApi~getAlluserDefinedEventsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all userDefinedEvents
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAlluserDefinedEventsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlluserDefinedEventsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlluserDefinedEventsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20051;

      return this.apiClient.callApi(
        '/sites/{id}/userDefinedEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllvideoWallsInAsites operation.
     * @callback moduleapi/CoreApi~getAllvideoWallsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200169{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all videoWalls
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllvideoWallsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllvideoWallsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllvideoWallsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200169;

      return this.apiClient.callApi(
        '/sites/{id}/videoWalls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllviewGroupsInAsites operation.
     * @callback moduleapi/CoreApi~getAllviewGroupsInAsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200170{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all viewGroups
     * Management Server
     * @param {String} id Id of the site object
     * @param {module:api/CoreApi~getAllviewGroupsInAsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllviewGroupsInAsites(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllviewGroupsInAsites");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200170;

      return this.apiClient.callApi(
        '/sites/{id}/viewGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getchildSitesById operation.
     * @callback moduleapi/CoreApi~getchildSitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200147{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Child sites
     * Child sites
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getchildSitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getchildSitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getchildSitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200147;

      return this.apiClient.callApi(
        '/childSites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getlicenseInformationsById operation.
     * @callback moduleapi/CoreApi~getlicenseInformationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20088{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of License information
     * License information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getlicenseInformationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getlicenseInformationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getlicenseInformationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20088;

      return this.apiClient.callApi(
        '/licenseInformations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getloginProvidersById operation.
     * @callback moduleapi/CoreApi~getloginProvidersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20095{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of External IDP
     * External IDP
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getloginProvidersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getloginProvidersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getloginProvidersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20095;

      return this.apiClient.callApi(
        '/loginProviders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getownerById operation.
     * @callback moduleapi/CoreApi~getownerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Basic Owner Information
     * Basic Owner Information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getownerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getownerById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getownerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20019;

      return this.apiClient.callApi(
        '/owner/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getpatrollingProfilesById operation.
     * @callback moduleapi/CoreApi~getpatrollingProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200120{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Patrolling profile
     * Patrolling profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getpatrollingProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getpatrollingProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getpatrollingProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200120;

      return this.apiClient.callApi(
        '/patrollingProfiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getregisteredClaimsById operation.
     * @callback moduleapi/CoreApi~getregisteredClaimsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200134{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Registered claims
     * Registered claims
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getregisteredClaimsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getregisteredClaimsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getregisteredClaimsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200134;

      return this.apiClient.callApi(
        '/registeredClaims/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getsitesById operation.
     * @callback moduleapi/CoreApi~getsitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200164{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Management Server
     * Management Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~getsitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getsitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getsitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200164;

      return this.apiClient.callApi(
        '/sites/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gettasksById operation.
     * @callback moduleapi/CoreApi~gettasksByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200185{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Tasks
     * Tasks
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~gettasksByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gettasksById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gettasksById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200185;

      return this.apiClient.callApi(
        '/tasks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gettoolOptionsById operation.
     * @callback moduleapi/CoreApi~gettoolOptionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200172{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of System options
     * System options
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/CoreApi~gettoolOptionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gettoolOptionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gettoolOptionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200172;

      return this.apiClient.callApi(
        '/toolOptions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchchildSitesById operation.
     * @callback moduleapi/CoreApi~patchchildSitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Child sites
     * Child sites
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ChildSites} opts.body 
     * @param {module:api/CoreApi~patchchildSitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchchildSitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchchildSitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/childSites/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchlicenseInformationsById operation.
     * @callback moduleapi/CoreApi~patchlicenseInformationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20089{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on License information
     * License information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LicenseInformations} opts.body 
     * @param {module:api/CoreApi~patchlicenseInformationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchlicenseInformationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchlicenseInformationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20089;

      return this.apiClient.callApi(
        '/licenseInformations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchloginProvidersById operation.
     * @callback moduleapi/CoreApi~patchloginProvidersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on External IDP
     * External IDP
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginProviders} opts.body 
     * @param {module:api/CoreApi~patchloginProvidersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchloginProvidersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchloginProvidersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20114;

      return this.apiClient.callApi(
        '/loginProviders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchownerById operation.
     * @callback moduleapi/CoreApi~patchownerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Basic Owner Information
     * Basic Owner Information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Owner} opts.body 
     * @param {module:api/CoreApi~patchownerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchownerById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchownerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/owner/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchpatrollingProfilesById operation.
     * @callback moduleapi/CoreApi~patchpatrollingProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Patrolling profile
     * Patrolling profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/PatrollingProfiles} opts.body 
     * @param {module:api/CoreApi~patchpatrollingProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchpatrollingProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchpatrollingProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/patrollingProfiles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchregisteredClaimsById operation.
     * @callback moduleapi/CoreApi~patchregisteredClaimsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Registered claims
     * Registered claims
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisteredClaims} opts.body 
     * @param {module:api/CoreApi~patchregisteredClaimsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchregisteredClaimsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchregisteredClaimsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20115;

      return this.apiClient.callApi(
        '/registeredClaims/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchsitesById operation.
     * @callback moduleapi/CoreApi~patchsitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200165{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Management Server
     * Management Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Sites} opts.body 
     * @param {module:api/CoreApi~patchsitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchsitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchsitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200165;

      return this.apiClient.callApi(
        '/sites/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchtoolOptionsById operation.
     * @callback moduleapi/CoreApi~patchtoolOptionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200173{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on System options
     * System options
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ToolOptions} opts.body 
     * @param {module:api/CoreApi~patchtoolOptionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchtoolOptionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchtoolOptionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200173;

      return this.apiClient.callApi(
        '/toolOptions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForlicenseInformations operation.
     * @callback moduleapi/CoreApi~postTaskForlicenseInformationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20090{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * License information
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ActivateLicense, or task&#x3D;RequestLicense, or task&#x3D;ChangeLicense, or task&#x3D;UpdateLicense, or task&#x3D;StopAutomaticLicenseActivation
     * @param {Object} opts Optional parameters
     * @param {module:model/LicenseInformationsIdBody} opts.body 
     * @param {module:api/CoreApi~postTaskForlicenseInformationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForlicenseInformations(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForlicenseInformations");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForlicenseInformations");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20090;

      return this.apiClient.callApi(
        '/licenseInformations/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForowner operation.
     * @callback moduleapi/CoreApi~postTaskForownerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20021{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Basic Owner Information
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;AddBasicOwnerInfo, or task&#x3D;RemoveBasicOwnerInfo
     * @param {Object} opts Optional parameters
     * @param {module:model/OwnerIdBody} opts.body 
     * @param {module:api/CoreApi~postTaskForownerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForowner(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForowner");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForowner");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20021;

      return this.apiClient.callApi(
        '/owner/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForpatrollingProfiles operation.
     * @callback moduleapi/CoreApi~postTaskForpatrollingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200121{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Patrolling profile
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;AddPatrollingEntry, or task&#x3D;RemovePatrollingEntry
     * @param {Object} opts Optional parameters
     * @param {module:model/PatrollingProfilesIdBody} opts.body 
     * @param {module:api/CoreApi~postTaskForpatrollingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForpatrollingProfiles(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForpatrollingProfiles");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForpatrollingProfiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200121;

      return this.apiClient.callApi(
        '/patrollingProfiles/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForsites operation.
     * @callback moduleapi/CoreApi~postTaskForsitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200163{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Management Server
     * @param {String} task task&#x3D;LoadTasks, or task&#x3D;ClientLogOnSupported, or task&#x3D;UploadFileChunk
     * @param {Object} opts Optional parameters
     * @param {module:model/SitesBody} opts.body 
     * @param {module:api/CoreApi~postTaskForsitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForsites(task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForsites");
      }

      let pathParams = {
        
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200163;

      return this.apiClient.callApi(
        '/sites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postloginProvidersById operation.
     * @callback moduleapi/CoreApi~postloginProvidersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new loginProviders
     * External IDP
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginProviders} opts.body 
     * @param {module:api/CoreApi~postloginProvidersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postloginProvidersById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20114;

      return this.apiClient.callApi(
        '/loginProviders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postloginProvidersByIdregisteredClaims operation.
     * @callback moduleapi/CoreApi~postloginProvidersByIdregisteredClaimsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a registeredClaims to a loginProviders
     * External IDP
     * @param {String} id Id of the loginProvider object
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisteredClaims} opts.body 
     * @param {module:api/CoreApi~postloginProvidersByIdregisteredClaimsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postloginProvidersByIdregisteredClaims(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postloginProvidersByIdregisteredClaims");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20115;

      return this.apiClient.callApi(
        '/loginProviders/{id}/registeredClaims', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putchildSitesById operation.
     * @callback moduleapi/CoreApi~putchildSitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200148{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Child sites
     * Child sites
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ChildSites} opts.body 
     * @param {module:api/CoreApi~putchildSitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putchildSitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putchildSitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200148;

      return this.apiClient.callApi(
        '/childSites/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putlicenseInformationsById operation.
     * @callback moduleapi/CoreApi~putlicenseInformationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20089{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on License information
     * License information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LicenseInformations} opts.body 
     * @param {module:api/CoreApi~putlicenseInformationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putlicenseInformationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putlicenseInformationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20089;

      return this.apiClient.callApi(
        '/licenseInformations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putloginProvidersById operation.
     * @callback moduleapi/CoreApi~putloginProvidersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on External IDP
     * External IDP
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LoginProviders} opts.body 
     * @param {module:api/CoreApi~putloginProvidersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putloginProvidersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putloginProvidersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20114;

      return this.apiClient.callApi(
        '/loginProviders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putownerById operation.
     * @callback moduleapi/CoreApi~putownerByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20020{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Basic Owner Information
     * Basic Owner Information
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Owner} opts.body 
     * @param {module:api/CoreApi~putownerByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putownerById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putownerById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20020;

      return this.apiClient.callApi(
        '/owner/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putpatrollingProfilesById operation.
     * @callback moduleapi/CoreApi~putpatrollingProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Patrolling profile
     * Patrolling profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/PatrollingProfiles} opts.body 
     * @param {module:api/CoreApi~putpatrollingProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putpatrollingProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putpatrollingProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/patrollingProfiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putregisteredClaimsById operation.
     * @callback moduleapi/CoreApi~putregisteredClaimsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Registered claims
     * Registered claims
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RegisteredClaims} opts.body 
     * @param {module:api/CoreApi~putregisteredClaimsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putregisteredClaimsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putregisteredClaimsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20115;

      return this.apiClient.callApi(
        '/registeredClaims/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putsitesById operation.
     * @callback moduleapi/CoreApi~putsitesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200165{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Management Server
     * Management Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Sites} opts.body 
     * @param {module:api/CoreApi~putsitesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putsitesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putsitesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200165;

      return this.apiClient.callApi(
        '/sites/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puttoolOptionsById operation.
     * @callback moduleapi/CoreApi~puttoolOptionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200173{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on System options
     * System options
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ToolOptions} opts.body 
     * @param {module:api/CoreApi~puttoolOptionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puttoolOptionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puttoolOptionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200173;

      return this.apiClient.callApi(
        '/toolOptions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {CameraGroups} from '../model/CameraGroups';
import {Cameras} from '../model/Cameras';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {InlineResponse200101} from '../model/InlineResponse200101';
import {InlineResponse200102} from '../model/InlineResponse200102';
import {InlineResponse200103} from '../model/InlineResponse200103';
import {InlineResponse200105} from '../model/InlineResponse200105';
import {InlineResponse200106} from '../model/InlineResponse200106';
import {InlineResponse200107} from '../model/InlineResponse200107';
import {InlineResponse200117} from '../model/InlineResponse200117';
import {InlineResponse200118} from '../model/InlineResponse200118';
import {InlineResponse200119} from '../model/InlineResponse200119';
import {InlineResponse200151} from '../model/InlineResponse200151';
import {InlineResponse200152} from '../model/InlineResponse200152';
import {InlineResponse200153} from '../model/InlineResponse200153';
import {InlineResponse20026} from '../model/InlineResponse20026';
import {InlineResponse20028} from '../model/InlineResponse20028';
import {InlineResponse20040} from '../model/InlineResponse20040';
import {InlineResponse20041} from '../model/InlineResponse20041';
import {InlineResponse20069} from '../model/InlineResponse20069';
import {InlineResponse20070} from '../model/InlineResponse20070';
import {InlineResponse20071} from '../model/InlineResponse20071';
import {InlineResponse20072} from '../model/InlineResponse20072';
import {InlineResponse20073} from '../model/InlineResponse20073';
import {InlineResponse20079} from '../model/InlineResponse20079';
import {InlineResponse20081} from '../model/InlineResponse20081';
import {InlineResponse20082} from '../model/InlineResponse20082';
import {InlineResponse20112} from '../model/InlineResponse20112';
import {InlineResponse20117} from '../model/InlineResponse20117';
import {InlineResponse20118} from '../model/InlineResponse20118';
import {InlineResponse20120} from '../model/InlineResponse20120';
import {InlineResponse20125} from '../model/InlineResponse20125';
import {InlineResponse2016} from '../model/InlineResponse2016';
import {InputEventGroups} from '../model/InputEventGroups';
import {InputEvents} from '../model/InputEvents';
import {Metadata} from '../model/Metadata';
import {MetadataGroups} from '../model/MetadataGroups';
import {MicrophoneGroups} from '../model/MicrophoneGroups';
import {Microphones} from '../model/Microphones';
import {OutputGroups} from '../model/OutputGroups';
import {Outputs} from '../model/Outputs';
import {SpeakerGroups} from '../model/SpeakerGroups';
import {Speakers} from '../model/Speakers';

/**
* Grouping service.
* @module api/GroupingApi
* @version 1.0.0
*/
export class GroupingApi {

    /**
    * Constructs a new GroupingApi. 
    * @alias module:api/GroupingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletecameraGroupsById operation.
     * @callback moduleapi/GroupingApi~deletecameraGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a cameraGroups
     * Camera groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletecameraGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletecameraGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletecameraGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/cameraGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletecameraGroupsByIdcameras operation.
     * @callback moduleapi/GroupingApi~deletecameraGroupsByIdcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a cameras from a cameraGroups
     * Camera groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletecameraGroupsByIdcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletecameraGroupsByIdcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletecameraGroupsByIdcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletecameraGroupsByIdcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/cameraGroups/{idParent}/cameras/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteinputEventGroupsById operation.
     * @callback moduleapi/GroupingApi~deleteinputEventGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a inputEventGroups
     * Input groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deleteinputEventGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteinputEventGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteinputEventGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteinputEventGroupsByIdinputEvents operation.
     * @callback moduleapi/GroupingApi~deleteinputEventGroupsByIdinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a inputEvents from a inputEventGroups
     * Input groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deleteinputEventGroupsByIdinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteinputEventGroupsByIdinputEvents(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleteinputEventGroupsByIdinputEvents");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteinputEventGroupsByIdinputEvents");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/inputEventGroups/{idParent}/inputEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemetadataGroupsById operation.
     * @callback moduleapi/GroupingApi~deletemetadataGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a metadataGroups
     * Metadata groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletemetadataGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemetadataGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemetadataGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20117;

      return this.apiClient.callApi(
        '/metadataGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemetadataGroupsByIdmetadata operation.
     * @callback moduleapi/GroupingApi~deletemetadataGroupsByIdmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a metadata from a metadataGroups
     * Metadata groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletemetadataGroupsByIdmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemetadataGroupsByIdmetadata(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletemetadataGroupsByIdmetadata");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemetadataGroupsByIdmetadata");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200101;

      return this.apiClient.callApi(
        '/metadataGroups/{idParent}/metadata/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemicrophoneGroupsById operation.
     * @callback moduleapi/GroupingApi~deletemicrophoneGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a microphoneGroups
     * Microphone groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletemicrophoneGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemicrophoneGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemicrophoneGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20118;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemicrophoneGroupsByIdmicrophones operation.
     * @callback moduleapi/GroupingApi~deletemicrophoneGroupsByIdmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a microphones from a microphoneGroups
     * Microphone groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletemicrophoneGroupsByIdmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemicrophoneGroupsByIdmicrophones(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletemicrophoneGroupsByIdmicrophones");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemicrophoneGroupsByIdmicrophones");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200105;

      return this.apiClient.callApi(
        '/microphoneGroups/{idParent}/microphones/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteoutputGroupsById operation.
     * @callback moduleapi/GroupingApi~deleteoutputGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20120{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a outputGroups
     * Output groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deleteoutputGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteoutputGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteoutputGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20120;

      return this.apiClient.callApi(
        '/outputGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteoutputGroupsByIdoutputs operation.
     * @callback moduleapi/GroupingApi~deleteoutputGroupsByIdoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a outputs from a outputGroups
     * Output groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deleteoutputGroupsByIdoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteoutputGroupsByIdoutputs(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleteoutputGroupsByIdoutputs");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteoutputGroupsByIdoutputs");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200117;

      return this.apiClient.callApi(
        '/outputGroups/{idParent}/outputs/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletespeakerGroupsById operation.
     * @callback moduleapi/GroupingApi~deletespeakerGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20125{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a speakerGroups
     * Speaker groups
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletespeakerGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletespeakerGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletespeakerGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20125;

      return this.apiClient.callApi(
        '/speakerGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletespeakerGroupsByIdspeakers operation.
     * @callback moduleapi/GroupingApi~deletespeakerGroupsByIdspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a speakers from a speakerGroups
     * Speaker groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~deletespeakerGroupsByIdspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletespeakerGroupsByIdspeakers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletespeakerGroupsByIdspeakers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletespeakerGroupsByIdspeakers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/speakerGroups/{idParent}/speakers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcameraGroups operation.
     * @callback moduleapi/GroupingApi~getAllcameraGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Camera groups
     * Camera groups
     * @param {module:api/GroupingApi~getAllcameraGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcameraGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/cameraGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcameraGroupsInAcameraGroups operation.
     * @callback moduleapi/GroupingApi~getAllcameraGroupsInAcameraGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20040{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all cameraGroups
     * Camera groups
     * @param {String} id Id of the cameraGroup object
     * @param {module:api/GroupingApi~getAllcameraGroupsInAcameraGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcameraGroupsInAcameraGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcameraGroupsInAcameraGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20040;

      return this.apiClient.callApi(
        '/cameraGroups/{id}/cameraGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcamerasInAcameraGroups operation.
     * @callback moduleapi/GroupingApi~getAllcamerasInAcameraGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all cameras
     * Camera groups
     * @param {String} id Id of the cameraGroup object
     * @param {module:api/GroupingApi~getAllcamerasInAcameraGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcamerasInAcameraGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcamerasInAcameraGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/cameraGroups/{id}/cameras', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEventGroups operation.
     * @callback moduleapi/GroupingApi~getAllinputEventGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Input groups
     * Input groups
     * @param {module:api/GroupingApi~getAllinputEventGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEventGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/inputEventGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEventGroupsInAinputEventGroups operation.
     * @callback moduleapi/GroupingApi~getAllinputEventGroupsInAinputEventGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20081{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all inputEventGroups
     * Input groups
     * @param {String} id Id of the inputEventGroup object
     * @param {module:api/GroupingApi~getAllinputEventGroupsInAinputEventGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEventGroupsInAinputEventGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllinputEventGroupsInAinputEventGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20081;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}/inputEventGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEventsInAinputEventGroups operation.
     * @callback moduleapi/GroupingApi~getAllinputEventsInAinputEventGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all inputEvents
     * Input groups
     * @param {String} id Id of the inputEventGroup object
     * @param {module:api/GroupingApi~getAllinputEventsInAinputEventGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEventsInAinputEventGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllinputEventsInAinputEventGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}/inputEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadataGroups operation.
     * @callback moduleapi/GroupingApi~getAllmetadataGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Metadata groups
     * Metadata groups
     * @param {module:api/GroupingApi~getAllmetadataGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadataGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200102;

      return this.apiClient.callApi(
        '/metadataGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadataGroupsInAmetadataGroups operation.
     * @callback moduleapi/GroupingApi~getAllmetadataGroupsInAmetadataGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200102{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all metadataGroups
     * Metadata groups
     * @param {String} id Id of the metadataGroup object
     * @param {module:api/GroupingApi~getAllmetadataGroupsInAmetadataGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadataGroupsInAmetadataGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmetadataGroupsInAmetadataGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200102;

      return this.apiClient.callApi(
        '/metadataGroups/{id}/metadataGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadataInAmetadataGroups operation.
     * @callback moduleapi/GroupingApi~getAllmetadataInAmetadataGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all metadata
     * Metadata groups
     * @param {String} id Id of the metadataGroup object
     * @param {module:api/GroupingApi~getAllmetadataInAmetadataGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadataInAmetadataGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmetadataInAmetadataGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/metadataGroups/{id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophoneGroups operation.
     * @callback moduleapi/GroupingApi~getAllmicrophoneGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Microphone groups
     * Microphone groups
     * @param {module:api/GroupingApi~getAllmicrophoneGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophoneGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;

      return this.apiClient.callApi(
        '/microphoneGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophoneGroupsInAmicrophoneGroups operation.
     * @callback moduleapi/GroupingApi~getAllmicrophoneGroupsInAmicrophoneGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200106{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all microphoneGroups
     * Microphone groups
     * @param {String} id Id of the microphoneGroup object
     * @param {module:api/GroupingApi~getAllmicrophoneGroupsInAmicrophoneGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophoneGroupsInAmicrophoneGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmicrophoneGroupsInAmicrophoneGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200106;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}/microphoneGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophonesInAmicrophoneGroups operation.
     * @callback moduleapi/GroupingApi~getAllmicrophonesInAmicrophoneGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all microphones
     * Microphone groups
     * @param {String} id Id of the microphoneGroup object
     * @param {module:api/GroupingApi~getAllmicrophonesInAmicrophoneGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophonesInAmicrophoneGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmicrophonesInAmicrophoneGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}/microphones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputGroups operation.
     * @callback moduleapi/GroupingApi~getAlloutputGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Output groups
     * Output groups
     * @param {module:api/GroupingApi~getAlloutputGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200118;

      return this.apiClient.callApi(
        '/outputGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputGroupsInAoutputGroups operation.
     * @callback moduleapi/GroupingApi~getAlloutputGroupsInAoutputGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all outputGroups
     * Output groups
     * @param {String} id Id of the outputGroup object
     * @param {module:api/GroupingApi~getAlloutputGroupsInAoutputGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputGroupsInAoutputGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlloutputGroupsInAoutputGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200118;

      return this.apiClient.callApi(
        '/outputGroups/{id}/outputGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputsInAoutputGroups operation.
     * @callback moduleapi/GroupingApi~getAlloutputsInAoutputGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all outputs
     * Output groups
     * @param {String} id Id of the outputGroup object
     * @param {module:api/GroupingApi~getAlloutputsInAoutputGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputsInAoutputGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlloutputsInAoutputGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/outputGroups/{id}/outputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakerGroups operation.
     * @callback moduleapi/GroupingApi~getAllspeakerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Speaker groups
     * Speaker groups
     * @param {module:api/GroupingApi~getAllspeakerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakerGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/speakerGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakerGroupsInAspeakerGroups operation.
     * @callback moduleapi/GroupingApi~getAllspeakerGroupsInAspeakerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200152{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all speakerGroups
     * Speaker groups
     * @param {String} id Id of the speakerGroup object
     * @param {module:api/GroupingApi~getAllspeakerGroupsInAspeakerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakerGroupsInAspeakerGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllspeakerGroupsInAspeakerGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200152;

      return this.apiClient.callApi(
        '/speakerGroups/{id}/speakerGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakersInAspeakerGroups operation.
     * @callback moduleapi/GroupingApi~getAllspeakersInAspeakerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all speakers
     * Speaker groups
     * @param {String} id Id of the speakerGroup object
     * @param {module:api/GroupingApi~getAllspeakersInAspeakerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakersInAspeakerGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllspeakersInAspeakerGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/speakerGroups/{id}/speakers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecamerasInAcameraGroups operation.
     * @callback moduleapi/GroupingApi~getOnecamerasInAcameraGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific cameras
     * Camera groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOnecamerasInAcameraGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecamerasInAcameraGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecamerasInAcameraGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecamerasInAcameraGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/cameraGroups/{idParent}/cameras/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneinputEventsInAinputEventGroups operation.
     * @callback moduleapi/GroupingApi~getOneinputEventsInAinputEventGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific inputEvents
     * Input groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOneinputEventsInAinputEventGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneinputEventsInAinputEventGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneinputEventsInAinputEventGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneinputEventsInAinputEventGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/inputEventGroups/{idParent}/inputEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemetadataInAmetadataGroups operation.
     * @callback moduleapi/GroupingApi~getOnemetadataInAmetadataGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific metadata
     * Metadata groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOnemetadataInAmetadataGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemetadataInAmetadataGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemetadataInAmetadataGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemetadataInAmetadataGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/metadataGroups/{idParent}/metadata/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemicrophonesInAmicrophoneGroups operation.
     * @callback moduleapi/GroupingApi~getOnemicrophonesInAmicrophoneGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific microphones
     * Microphone groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOnemicrophonesInAmicrophoneGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemicrophonesInAmicrophoneGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemicrophonesInAmicrophoneGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemicrophonesInAmicrophoneGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/microphoneGroups/{idParent}/microphones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneoutputsInAoutputGroups operation.
     * @callback moduleapi/GroupingApi~getOneoutputsInAoutputGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific outputs
     * Output groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOneoutputsInAoutputGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneoutputsInAoutputGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneoutputsInAoutputGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneoutputsInAoutputGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/outputGroups/{idParent}/outputs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnespeakersInAspeakerGroups operation.
     * @callback moduleapi/GroupingApi~getOnespeakersInAspeakerGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific speakers
     * Speaker groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/GroupingApi~getOnespeakersInAspeakerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnespeakersInAspeakerGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnespeakersInAspeakerGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnespeakersInAspeakerGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/speakerGroups/{idParent}/speakers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getcameraGroupsById operation.
     * @callback moduleapi/GroupingApi~getcameraGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20041{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Camera groups
     * Camera groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getcameraGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getcameraGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getcameraGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20041;

      return this.apiClient.callApi(
        '/cameraGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getinputEventGroupsById operation.
     * @callback moduleapi/GroupingApi~getinputEventGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20082{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Input groups
     * Input groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getinputEventGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getinputEventGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getinputEventGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20082;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmetadataGroupsById operation.
     * @callback moduleapi/GroupingApi~getmetadataGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200103{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Metadata groups
     * Metadata groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getmetadataGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmetadataGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmetadataGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200103;

      return this.apiClient.callApi(
        '/metadataGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmicrophoneGroupsById operation.
     * @callback moduleapi/GroupingApi~getmicrophoneGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200107{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Microphone groups
     * Microphone groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getmicrophoneGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmicrophoneGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmicrophoneGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200107;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getoutputGroupsById operation.
     * @callback moduleapi/GroupingApi~getoutputGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200119{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Output groups
     * Output groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getoutputGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getoutputGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getoutputGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200119;

      return this.apiClient.callApi(
        '/outputGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getspeakerGroupsById operation.
     * @callback moduleapi/GroupingApi~getspeakerGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200153{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Speaker groups
     * Speaker groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/GroupingApi~getspeakerGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getspeakerGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getspeakerGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200153;

      return this.apiClient.callApi(
        '/speakerGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchcameraGroupsById operation.
     * @callback moduleapi/GroupingApi~patchcameraGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Camera groups
     * Camera groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraGroups} opts.body 
     * @param {module:api/GroupingApi~patchcameraGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchcameraGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchcameraGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/cameraGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchinputEventGroupsById operation.
     * @callback moduleapi/GroupingApi~patchinputEventGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Input groups
     * Input groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEventGroups} opts.body 
     * @param {module:api/GroupingApi~patchinputEventGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchinputEventGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchinputEventGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmetadataGroupsById operation.
     * @callback moduleapi/GroupingApi~patchmetadataGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Metadata groups
     * Metadata groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MetadataGroups} opts.body 
     * @param {module:api/GroupingApi~patchmetadataGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmetadataGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmetadataGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20117;

      return this.apiClient.callApi(
        '/metadataGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmicrophoneGroupsById operation.
     * @callback moduleapi/GroupingApi~patchmicrophoneGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Microphone groups
     * Microphone groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MicrophoneGroups} opts.body 
     * @param {module:api/GroupingApi~patchmicrophoneGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmicrophoneGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmicrophoneGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20118;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchoutputGroupsById operation.
     * @callback moduleapi/GroupingApi~patchoutputGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20120{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Output groups
     * Output groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/OutputGroups} opts.body 
     * @param {module:api/GroupingApi~patchoutputGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchoutputGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchoutputGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20120;

      return this.apiClient.callApi(
        '/outputGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchspeakerGroupsById operation.
     * @callback moduleapi/GroupingApi~patchspeakerGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20125{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Speaker groups
     * Speaker groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/SpeakerGroups} opts.body 
     * @param {module:api/GroupingApi~patchspeakerGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchspeakerGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchspeakerGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20125;

      return this.apiClient.callApi(
        '/speakerGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postcameraGroupsById operation.
     * @callback moduleapi/GroupingApi~postcameraGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new cameraGroups
     * Camera groups
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraGroups} opts.body 
     * @param {module:api/GroupingApi~postcameraGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postcameraGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/cameraGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postcameraGroupsByIdcameras operation.
     * @callback moduleapi/GroupingApi~postcameraGroupsByIdcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a cameras to a cameraGroups
     * Camera groups
     * @param {String} id Id of the cameraGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Cameras} opts.body 
     * @param {module:api/GroupingApi~postcameraGroupsByIdcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postcameraGroupsByIdcameras(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postcameraGroupsByIdcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/cameraGroups/{id}/cameras', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postinputEventGroupsById operation.
     * @callback moduleapi/GroupingApi~postinputEventGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new inputEventGroups
     * Input groups
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEventGroups} opts.body 
     * @param {module:api/GroupingApi~postinputEventGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postinputEventGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/inputEventGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postinputEventGroupsByIdinputEvents operation.
     * @callback moduleapi/GroupingApi~postinputEventGroupsByIdinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a inputEvents to a inputEventGroups
     * Input groups
     * @param {String} id Id of the inputEventGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEvents} opts.body 
     * @param {module:api/GroupingApi~postinputEventGroupsByIdinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postinputEventGroupsByIdinputEvents(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postinputEventGroupsByIdinputEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}/inputEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmetadataGroupsById operation.
     * @callback moduleapi/GroupingApi~postmetadataGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new metadataGroups
     * Metadata groups
     * @param {Object} opts Optional parameters
     * @param {module:model/MetadataGroups} opts.body 
     * @param {module:api/GroupingApi~postmetadataGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmetadataGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20117;

      return this.apiClient.callApi(
        '/metadataGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmetadataGroupsByIdmetadata operation.
     * @callback moduleapi/GroupingApi~postmetadataGroupsByIdmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a metadata to a metadataGroups
     * Metadata groups
     * @param {String} id Id of the metadataGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Metadata} opts.body 
     * @param {module:api/GroupingApi~postmetadataGroupsByIdmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmetadataGroupsByIdmetadata(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postmetadataGroupsByIdmetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200101;

      return this.apiClient.callApi(
        '/metadataGroups/{id}/metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmicrophoneGroupsById operation.
     * @callback moduleapi/GroupingApi~postmicrophoneGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new microphoneGroups
     * Microphone groups
     * @param {Object} opts Optional parameters
     * @param {module:model/MicrophoneGroups} opts.body 
     * @param {module:api/GroupingApi~postmicrophoneGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmicrophoneGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20118;

      return this.apiClient.callApi(
        '/microphoneGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmicrophoneGroupsByIdmicrophones operation.
     * @callback moduleapi/GroupingApi~postmicrophoneGroupsByIdmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a microphones to a microphoneGroups
     * Microphone groups
     * @param {String} id Id of the microphoneGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Microphones} opts.body 
     * @param {module:api/GroupingApi~postmicrophoneGroupsByIdmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmicrophoneGroupsByIdmicrophones(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postmicrophoneGroupsByIdmicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200105;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}/microphones', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postoutputGroupsById operation.
     * @callback moduleapi/GroupingApi~postoutputGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20120{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new outputGroups
     * Output groups
     * @param {Object} opts Optional parameters
     * @param {module:model/OutputGroups} opts.body 
     * @param {module:api/GroupingApi~postoutputGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postoutputGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20120;

      return this.apiClient.callApi(
        '/outputGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postoutputGroupsByIdoutputs operation.
     * @callback moduleapi/GroupingApi~postoutputGroupsByIdoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a outputs to a outputGroups
     * Output groups
     * @param {String} id Id of the outputGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Outputs} opts.body 
     * @param {module:api/GroupingApi~postoutputGroupsByIdoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postoutputGroupsByIdoutputs(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postoutputGroupsByIdoutputs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200117;

      return this.apiClient.callApi(
        '/outputGroups/{id}/outputs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postspeakerGroupsById operation.
     * @callback moduleapi/GroupingApi~postspeakerGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20125{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new speakerGroups
     * Speaker groups
     * @param {Object} opts Optional parameters
     * @param {module:model/SpeakerGroups} opts.body 
     * @param {module:api/GroupingApi~postspeakerGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postspeakerGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20125;

      return this.apiClient.callApi(
        '/speakerGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postspeakerGroupsByIdspeakers operation.
     * @callback moduleapi/GroupingApi~postspeakerGroupsByIdspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a speakers to a speakerGroups
     * Speaker groups
     * @param {String} id Id of the speakerGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Speakers} opts.body 
     * @param {module:api/GroupingApi~postspeakerGroupsByIdspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postspeakerGroupsByIdspeakers(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postspeakerGroupsByIdspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/speakerGroups/{id}/speakers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putcameraGroupsById operation.
     * @callback moduleapi/GroupingApi~putcameraGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Camera groups
     * Camera groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/CameraGroups} opts.body 
     * @param {module:api/GroupingApi~putcameraGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putcameraGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putcameraGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2016;

      return this.apiClient.callApi(
        '/cameraGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putinputEventGroupsById operation.
     * @callback moduleapi/GroupingApi~putinputEventGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Input groups
     * Input groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEventGroups} opts.body 
     * @param {module:api/GroupingApi~putinputEventGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putinputEventGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putinputEventGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20112;

      return this.apiClient.callApi(
        '/inputEventGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmetadataGroupsById operation.
     * @callback moduleapi/GroupingApi~putmetadataGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Metadata groups
     * Metadata groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MetadataGroups} opts.body 
     * @param {module:api/GroupingApi~putmetadataGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmetadataGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmetadataGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20117;

      return this.apiClient.callApi(
        '/metadataGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmicrophoneGroupsById operation.
     * @callback moduleapi/GroupingApi~putmicrophoneGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20118{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Microphone groups
     * Microphone groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MicrophoneGroups} opts.body 
     * @param {module:api/GroupingApi~putmicrophoneGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmicrophoneGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmicrophoneGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20118;

      return this.apiClient.callApi(
        '/microphoneGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putoutputGroupsById operation.
     * @callback moduleapi/GroupingApi~putoutputGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20120{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Output groups
     * Output groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/OutputGroups} opts.body 
     * @param {module:api/GroupingApi~putoutputGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putoutputGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putoutputGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20120;

      return this.apiClient.callApi(
        '/outputGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putspeakerGroupsById operation.
     * @callback moduleapi/GroupingApi~putspeakerGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20125{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Speaker groups
     * Speaker groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/SpeakerGroups} opts.body 
     * @param {module:api/GroupingApi~putspeakerGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putspeakerGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putspeakerGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20125;

      return this.apiClient.callApi(
        '/speakerGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
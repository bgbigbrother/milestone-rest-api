/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Cameras} from '../model/Cameras';
import {CamerasIdBody} from '../model/CamerasIdBody';
import {ChangeSecurityPermissionsRequestBody} from '../model/ChangeSecurityPermissionsRequestBody';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {Hardware} from '../model/Hardware';
import {HardwareDeviceEvents} from '../model/HardwareDeviceEvents';
import {HardwareIdBody} from '../model/HardwareIdBody';
import {HardwarePtzSettings} from '../model/HardwarePtzSettings';
import {IdPtzPresetsBody} from '../model/IdPtzPresetsBody';
import {InlineResponse200100} from '../model/InlineResponse200100';
import {InlineResponse200101} from '../model/InlineResponse200101';
import {InlineResponse200104} from '../model/InlineResponse200104';
import {InlineResponse200105} from '../model/InlineResponse200105';
import {InlineResponse200116} from '../model/InlineResponse200116';
import {InlineResponse200117} from '../model/InlineResponse200117';
import {InlineResponse200150} from '../model/InlineResponse200150';
import {InlineResponse200151} from '../model/InlineResponse200151';
import {InlineResponse200159} from '../model/InlineResponse200159';
import {InlineResponse200160} from '../model/InlineResponse200160';
import {InlineResponse200161} from '../model/InlineResponse200161';
import {InlineResponse20026} from '../model/InlineResponse20026';
import {InlineResponse20027} from '../model/InlineResponse20027';
import {InlineResponse20028} from '../model/InlineResponse20028';
import {InlineResponse20029} from '../model/InlineResponse20029';
import {InlineResponse20030} from '../model/InlineResponse20030';
import {InlineResponse20031} from '../model/InlineResponse20031';
import {InlineResponse20032} from '../model/InlineResponse20032';
import {InlineResponse20033} from '../model/InlineResponse20033';
import {InlineResponse20034} from '../model/InlineResponse20034';
import {InlineResponse20035} from '../model/InlineResponse20035';
import {InlineResponse20036} from '../model/InlineResponse20036';
import {InlineResponse20037} from '../model/InlineResponse20037';
import {InlineResponse20038} from '../model/InlineResponse20038';
import {InlineResponse20039} from '../model/InlineResponse20039';
import {InlineResponse20063} from '../model/InlineResponse20063';
import {InlineResponse20064} from '../model/InlineResponse20064';
import {InlineResponse20065} from '../model/InlineResponse20065';
import {InlineResponse20066} from '../model/InlineResponse20066';
import {InlineResponse20067} from '../model/InlineResponse20067';
import {InlineResponse20068} from '../model/InlineResponse20068';
import {InlineResponse20069} from '../model/InlineResponse20069';
import {InlineResponse20070} from '../model/InlineResponse20070';
import {InlineResponse20071} from '../model/InlineResponse20071';
import {InlineResponse20072} from '../model/InlineResponse20072';
import {InlineResponse20073} from '../model/InlineResponse20073';
import {InlineResponse20074} from '../model/InlineResponse20074';
import {InlineResponse20075} from '../model/InlineResponse20075';
import {InlineResponse20076} from '../model/InlineResponse20076';
import {InlineResponse20077} from '../model/InlineResponse20077';
import {InlineResponse20078} from '../model/InlineResponse20078';
import {InlineResponse20079} from '../model/InlineResponse20079';
import {InlineResponse20080} from '../model/InlineResponse20080';
import {InlineResponse2014} from '../model/InlineResponse2014';
import {InlineResponse2015} from '../model/InlineResponse2015';
import {InputEvents} from '../model/InputEvents';
import {Metadata} from '../model/Metadata';
import {MetadataIdBody} from '../model/MetadataIdBody';
import {Microphones} from '../model/Microphones';
import {MicrophonesIdBody} from '../model/MicrophonesIdBody';
import {Outputs} from '../model/Outputs';
import {PatrollingProfiles} from '../model/PatrollingProfiles';
import {Speakers} from '../model/Speakers';
import {SpeakersIdBody} from '../model/SpeakersIdBody';
import {Streams} from '../model/Streams';
import {StreamsIdBody} from '../model/StreamsIdBody';

/**
* DeviceConfig service.
* @module api/DeviceConfigApi
* @version 1.0.0
*/
export class DeviceConfigApi {

    /**
    * Constructs a new DeviceConfigApi. 
    * @alias module:api/DeviceConfigApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletecamerasByIdpatrollingProfiles operation.
     * @callback moduleapi/DeviceConfigApi~deletecamerasByIdpatrollingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a patrollingProfiles from a cameras
     * Camera
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/DeviceConfigApi~deletecamerasByIdpatrollingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletecamerasByIdpatrollingProfiles(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletecamerasByIdpatrollingProfiles");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletecamerasByIdpatrollingProfiles");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/cameras/{idParent}/patrollingProfiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletecamerasByIdptzPresets operation.
     * @callback moduleapi/DeviceConfigApi~deletecamerasByIdptzPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a ptzPresets from a cameras
     * Camera
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/DeviceConfigApi~deletecamerasByIdptzPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletecamerasByIdptzPresets(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletecamerasByIdptzPresets");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletecamerasByIdptzPresets");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2015;

      return this.apiClient.callApi(
        '/cameras/{idParent}/ptzPresets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Camera
     * Camera. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcameras(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/cameras', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcamerasInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllcamerasInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all cameras
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllcamerasInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcamerasInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcamerasInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/hardware/{id}/cameras', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientSettingsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllclientSettingsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all clientSettings
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllclientSettingsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientSettingsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclientSettingsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/cameras/{id}/clientSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientSettingsInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getAllclientSettingsInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all clientSettings
     * Metadata
     * @param {String} id Id of the metadata object
     * @param {module:api/DeviceConfigApi~getAllclientSettingsInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientSettingsInAmetadata(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclientSettingsInAmetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/metadata/{id}/clientSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientSettingsInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getAllclientSettingsInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all clientSettings
     * Microphone
     * @param {String} id Id of the microphone object
     * @param {module:api/DeviceConfigApi~getAllclientSettingsInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientSettingsInAmicrophones(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclientSettingsInAmicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/microphones/{id}/clientSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientSettingsInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getAllclientSettingsInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all clientSettings
     * Speaker
     * @param {String} id Id of the speaker object
     * @param {module:api/DeviceConfigApi~getAllclientSettingsInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientSettingsInAspeakers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclientSettingsInAspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/speakers/{id}/clientSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/cameras/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/hardware/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Input
     * @param {String} id Id of the inputEvent object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAinputEvents(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAinputEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/inputEvents/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Metadata
     * @param {String} id Id of the metadata object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAmetadata(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAmetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/metadata/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Microphone
     * @param {String} id Id of the microphone object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAmicrophones(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAmicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/microphones/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAoutputs operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Output
     * @param {String} id Id of the output object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAoutputs(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAoutputs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/outputs/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllcustomPropertiesInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getAllcustomPropertiesInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all customProperties
     * Speaker
     * @param {String} id Id of the speaker object
     * @param {module:api/DeviceConfigApi~getAllcustomPropertiesInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllcustomPropertiesInAspeakers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllcustomPropertiesInAspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/speakers/{id}/customProperties', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20063{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Hardware
     * Hardware. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardware(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20063;

      return this.apiClient.callApi(
        '/hardware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEvents operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Hardware device event
     * Hardware device event
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEvents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/cameras/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/hardware/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Input
     * @param {String} id Id of the inputEvent object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAinputEvents(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAinputEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/inputEvents/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Metadata
     * @param {String} id Id of the metadata object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAmetadata(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAmetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/metadata/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Microphone
     * @param {String} id Id of the microphone object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAmicrophones(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAmicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/microphones/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAoutputs operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Output
     * @param {String} id Id of the output object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAoutputs(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAoutputs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/outputs/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDeviceEventsInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDeviceEventsInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20033{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDeviceEvents
     * Speaker
     * @param {String} id Id of the speaker object
     * @param {module:api/DeviceConfigApi~getAllhardwareDeviceEventsInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDeviceEventsInAspeakers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDeviceEventsInAspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20033;

      return this.apiClient.callApi(
        '/speakers/{id}/hardwareDeviceEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDriverSettingsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwareDriverSettingsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20067{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDriverSettings
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllhardwareDriverSettingsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDriverSettingsInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDriverSettingsInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20067;

      return this.apiClient.callApi(
        '/hardware/{id}/hardwareDriverSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwarePtzSettings operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwarePtzSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all PTZ
     * PTZ
     * @param {module:api/DeviceConfigApi~getAllhardwarePtzSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwarePtzSettings(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/hardwarePtzSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwarePtzSettingsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllhardwarePtzSettingsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20068{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwarePtzSettings
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllhardwarePtzSettingsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwarePtzSettingsInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwarePtzSettingsInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20068;

      return this.apiClient.callApi(
        '/hardware/{id}/hardwarePtzSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getAllinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Input
     * Input. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEvents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/inputEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllinputEventsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllinputEventsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all inputEvents
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllinputEventsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllinputEventsInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllinputEventsInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/hardware/{id}/inputEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getAllmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Metadata
     * Metadata. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadata(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmetadataInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllmetadataInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all metadata
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllmetadataInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmetadataInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmetadataInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/hardware/{id}/metadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getAllmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Microphone
     * Microphone. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophones(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/microphones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmicrophonesInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllmicrophonesInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all microphones
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllmicrophonesInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmicrophonesInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmicrophonesInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/hardware/{id}/microphones', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmotionDetectionsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllmotionDetectionsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all motionDetections
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllmotionDetectionsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmotionDetectionsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmotionDetectionsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/cameras/{id}/motionDetections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputs operation.
     * @callback moduleapi/DeviceConfigApi~getAlloutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Output
     * Output. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAlloutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputs(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/outputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlloutputsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAlloutputsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all outputs
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAlloutputsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlloutputsInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlloutputsInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/hardware/{id}/outputs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllpatrollingProfilesInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllpatrollingProfilesInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20035{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all patrollingProfiles
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllpatrollingProfilesInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllpatrollingProfilesInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllpatrollingProfilesInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20035;

      return this.apiClient.callApi(
        '/cameras/{id}/patrollingProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllprivacyProtectionsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllprivacyProtectionsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all privacyProtections
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllprivacyProtectionsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllprivacyProtectionsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllprivacyProtectionsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/cameras/{id}/privacyProtections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllptzPresetsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllptzPresetsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20037{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all ptzPresets
     * Camera
     * @param {String} id Id of the object
     * @param {module:api/DeviceConfigApi~getAllptzPresetsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllptzPresetsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllptzPresetsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20037;

      return this.apiClient.callApi(
        '/cameras/{id}/ptzPresets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/cameras/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Input
     * @param {String} id Id of the inputEvent object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAinputEvents(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAinputEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/inputEvents/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Metadata
     * @param {String} id Id of the metadata object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAmetadata(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAmetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/metadata/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Microphone
     * @param {String} id Id of the microphone object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAmicrophones(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAmicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/microphones/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAoutputs operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Output
     * @param {String} id Id of the output object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAoutputs(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAoutputs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/outputs/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsettingsInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getAllsettingsInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all settings
     * Speaker
     * @param {String} id Id of the speaker object
     * @param {module:api/DeviceConfigApi~getAllsettingsInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsettingsInAspeakers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllsettingsInAspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/speakers/{id}/settings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getAllspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Speaker
     * Speaker. To include disabled items add ?disabled to the request.
     * @param {module:api/DeviceConfigApi~getAllspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/speakers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllspeakersInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getAllspeakersInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all speakers
     * Hardware
     * @param {String} id Id of the hardware object
     * @param {module:api/DeviceConfigApi~getAllspeakersInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllspeakersInAhardware(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllspeakersInAhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/hardware/{id}/speakers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllstreamsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getAllstreamsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all streams
     * Camera
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getAllstreamsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllstreamsInAcameras(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllstreamsInAcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20039;

      return this.apiClient.callApi(
        '/cameras/{id}/streams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecamerasInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnecamerasInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20026{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific cameras
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the camera object
     * @param {module:api/DeviceConfigApi~getOnecamerasInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecamerasInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecamerasInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecamerasInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20026;

      return this.apiClient.callApi(
        '/hardware/{idParent}/cameras/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneclientSettingsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOneclientSettingsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific clientSettings
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the clientSetting object
     * @param {module:api/DeviceConfigApi~getOneclientSettingsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneclientSettingsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneclientSettingsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneclientSettingsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/cameras/{idParent}/clientSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneclientSettingsInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getOneclientSettingsInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific clientSettings
     * Metadata
     * @param {String} idParent Id of the metadata object
     * @param {String} id Id of the clientSetting object
     * @param {module:api/DeviceConfigApi~getOneclientSettingsInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneclientSettingsInAmetadata(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneclientSettingsInAmetadata");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneclientSettingsInAmetadata");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/metadata/{idParent}/clientSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneclientSettingsInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getOneclientSettingsInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific clientSettings
     * Microphone
     * @param {String} idParent Id of the microphone object
     * @param {String} id Id of the clientSetting object
     * @param {module:api/DeviceConfigApi~getOneclientSettingsInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneclientSettingsInAmicrophones(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneclientSettingsInAmicrophones");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneclientSettingsInAmicrophones");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/microphones/{idParent}/clientSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneclientSettingsInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getOneclientSettingsInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20030{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific clientSettings
     * Speaker
     * @param {String} idParent Id of the speaker object
     * @param {String} id Id of the clientSetting object
     * @param {module:api/DeviceConfigApi~getOneclientSettingsInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneclientSettingsInAspeakers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneclientSettingsInAspeakers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneclientSettingsInAspeakers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20030;

      return this.apiClient.callApi(
        '/speakers/{idParent}/clientSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/cameras/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/hardware/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Input
     * @param {String} idParent Id of the inputEvent object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAinputEvents(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAinputEvents");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAinputEvents");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/inputEvents/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Metadata
     * @param {String} idParent Id of the metadata object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAmetadata(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAmetadata");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAmetadata");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/metadata/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Microphone
     * @param {String} idParent Id of the microphone object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAmicrophones(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAmicrophones");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAmicrophones");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/microphones/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAoutputs operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Output
     * @param {String} idParent Id of the output object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAoutputs(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAoutputs");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAoutputs");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/outputs/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnecustomPropertiesInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getOnecustomPropertiesInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20031{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific customProperties
     * Speaker
     * @param {String} idParent Id of the speaker object
     * @param {String} id Id of the customPropertie object
     * @param {module:api/DeviceConfigApi~getOnecustomPropertiesInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnecustomPropertiesInAspeakers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnecustomPropertiesInAspeakers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnecustomPropertiesInAspeakers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20031;

      return this.apiClient.callApi(
        '/speakers/{idParent}/customProperties/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnehardwareDriverSettingsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnehardwareDriverSettingsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20067{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific hardwareDriverSettings
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the hardwareDriverSetting object
     * @param {module:api/DeviceConfigApi~getOnehardwareDriverSettingsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnehardwareDriverSettingsInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnehardwareDriverSettingsInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnehardwareDriverSettingsInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20067;

      return this.apiClient.callApi(
        '/hardware/{idParent}/hardwareDriverSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneinputEventsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOneinputEventsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20069{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific inputEvents
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the inputEvent object
     * @param {module:api/DeviceConfigApi~getOneinputEventsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneinputEventsInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneinputEventsInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneinputEventsInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20069;

      return this.apiClient.callApi(
        '/hardware/{idParent}/inputEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemetadataInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnemetadataInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20070{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific metadata
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the metadata object
     * @param {module:api/DeviceConfigApi~getOnemetadataInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemetadataInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemetadataInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemetadataInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20070;

      return this.apiClient.callApi(
        '/hardware/{idParent}/metadata/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemicrophonesInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnemicrophonesInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20071{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific microphones
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the microphone object
     * @param {module:api/DeviceConfigApi~getOnemicrophonesInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemicrophonesInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemicrophonesInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemicrophonesInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20071;

      return this.apiClient.callApi(
        '/hardware/{idParent}/microphones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemotionDetectionsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOnemotionDetectionsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20034{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific motionDetections
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the motionDetection object
     * @param {module:api/DeviceConfigApi~getOnemotionDetectionsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemotionDetectionsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemotionDetectionsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemotionDetectionsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20034;

      return this.apiClient.callApi(
        '/cameras/{idParent}/motionDetections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneoutputsInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOneoutputsInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20072{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific outputs
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the output object
     * @param {module:api/DeviceConfigApi~getOneoutputsInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneoutputsInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneoutputsInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneoutputsInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20072;

      return this.apiClient.callApi(
        '/hardware/{idParent}/outputs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneprivacyProtectionsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOneprivacyProtectionsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20036{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific privacyProtections
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the privacyProtection object
     * @param {module:api/DeviceConfigApi~getOneprivacyProtectionsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneprivacyProtectionsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneprivacyProtectionsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneprivacyProtectionsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20036;

      return this.apiClient.callApi(
        '/cameras/{idParent}/privacyProtections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneptzPresetsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOneptzPresetsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20037{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific ptzPresets
     * Camera
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/DeviceConfigApi~getOneptzPresetsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneptzPresetsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneptzPresetsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneptzPresetsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20037;

      return this.apiClient.callApi(
        '/cameras/{idParent}/ptzPresets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/cameras/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Input
     * @param {String} idParent Id of the inputEvent object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAinputEvents(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAinputEvents");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAinputEvents");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/inputEvents/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAmetadata operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAmetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Metadata
     * @param {String} idParent Id of the metadata object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAmetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAmetadata(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAmetadata");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAmetadata");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/metadata/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAmicrophones operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAmicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Microphone
     * @param {String} idParent Id of the microphone object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAmicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAmicrophones(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAmicrophones");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAmicrophones");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/microphones/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAoutputs operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Output
     * @param {String} idParent Id of the output object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAoutputs(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAoutputs");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAoutputs");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/outputs/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnesettingsInAspeakers operation.
     * @callback moduleapi/DeviceConfigApi~getOnesettingsInAspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20032{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific settings
     * Speaker
     * @param {String} idParent Id of the speaker object
     * @param {String} id Id of the setting object
     * @param {module:api/DeviceConfigApi~getOnesettingsInAspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnesettingsInAspeakers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnesettingsInAspeakers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnesettingsInAspeakers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20032;

      return this.apiClient.callApi(
        '/speakers/{idParent}/settings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnespeakersInAhardware operation.
     * @callback moduleapi/DeviceConfigApi~getOnespeakersInAhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20073{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific speakers
     * Hardware
     * @param {String} idParent Id of the hardware object
     * @param {String} id Id of the speaker object
     * @param {module:api/DeviceConfigApi~getOnespeakersInAhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnespeakersInAhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnespeakersInAhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnespeakersInAhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20073;

      return this.apiClient.callApi(
        '/hardware/{idParent}/speakers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnestreamsInAcameras operation.
     * @callback moduleapi/DeviceConfigApi~getOnestreamsInAcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20039{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific streams
     * Camera
     * @param {String} idParent Id of the camera object
     * @param {String} id Id of the stream object
     * @param {module:api/DeviceConfigApi~getOnestreamsInAcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnestreamsInAcameras(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnestreamsInAcameras");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnestreamsInAcameras");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20039;

      return this.apiClient.callApi(
        '/cameras/{idParent}/streams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getcamerasById operation.
     * @callback moduleapi/DeviceConfigApi~getcamerasByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20027{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Camera
     * Camera
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getcamerasByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getcamerasById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getcamerasById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20027;

      return this.apiClient.callApi(
        '/cameras/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gethardwareById operation.
     * @callback moduleapi/DeviceConfigApi~gethardwareByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20064{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Hardware
     * Hardware
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~gethardwareByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gethardwareById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gethardwareById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20064;

      return this.apiClient.callApi(
        '/hardware/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gethardwareDeviceEventsById operation.
     * @callback moduleapi/DeviceConfigApi~gethardwareDeviceEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20074{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Hardware device event
     * Hardware device event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~gethardwareDeviceEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gethardwareDeviceEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gethardwareDeviceEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20074;

      return this.apiClient.callApi(
        '/hardwareDeviceEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gethardwarePtzSettingsById operation.
     * @callback moduleapi/DeviceConfigApi~gethardwarePtzSettingsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20076{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of PTZ
     * PTZ
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~gethardwarePtzSettingsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gethardwarePtzSettingsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gethardwarePtzSettingsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20076;

      return this.apiClient.callApi(
        '/hardwarePtzSettings/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getinputEventsById operation.
     * @callback moduleapi/DeviceConfigApi~getinputEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20078{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Input
     * Input
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getinputEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getinputEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getinputEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20078;

      return this.apiClient.callApi(
        '/inputEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmetadataById operation.
     * @callback moduleapi/DeviceConfigApi~getmetadataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200100{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Metadata
     * Metadata
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getmetadataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmetadataById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmetadataById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200100;

      return this.apiClient.callApi(
        '/metadata/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmicrophonesById operation.
     * @callback moduleapi/DeviceConfigApi~getmicrophonesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200104{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Microphone
     * Microphone
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getmicrophonesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmicrophonesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmicrophonesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200104;

      return this.apiClient.callApi(
        '/microphones/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getoutputsById operation.
     * @callback moduleapi/DeviceConfigApi~getoutputsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200116{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Output
     * Output
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getoutputsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getoutputsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getoutputsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200116;

      return this.apiClient.callApi(
        '/outputs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getspeakersById operation.
     * @callback moduleapi/DeviceConfigApi~getspeakersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200150{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Speaker
     * Speaker
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getspeakersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getspeakersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getspeakersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200150;

      return this.apiClient.callApi(
        '/speakers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getstreamsById operation.
     * @callback moduleapi/DeviceConfigApi~getstreamsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200159{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Stream
     * Stream
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/DeviceConfigApi~getstreamsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getstreamsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getstreamsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200159;

      return this.apiClient.callApi(
        '/streams/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchcamerasById operation.
     * @callback moduleapi/DeviceConfigApi~patchcamerasByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Camera
     * Camera
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Cameras} opts.body 
     * @param {module:api/DeviceConfigApi~patchcamerasByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchcamerasById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchcamerasById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/cameras/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchhardwareById operation.
     * @callback moduleapi/DeviceConfigApi~patchhardwareByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20065{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Hardware
     * Hardware
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Hardware} opts.body 
     * @param {module:api/DeviceConfigApi~patchhardwareByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchhardwareById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchhardwareById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/hardware/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchhardwareDeviceEventsById operation.
     * @callback moduleapi/DeviceConfigApi~patchhardwareDeviceEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Hardware device event
     * Hardware device event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/HardwareDeviceEvents} opts.body 
     * @param {module:api/DeviceConfigApi~patchhardwareDeviceEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchhardwareDeviceEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchhardwareDeviceEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/hardwareDeviceEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchhardwarePtzSettingsById operation.
     * @callback moduleapi/DeviceConfigApi~patchhardwarePtzSettingsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on PTZ
     * PTZ
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/HardwarePtzSettings} opts.body 
     * @param {module:api/DeviceConfigApi~patchhardwarePtzSettingsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchhardwarePtzSettingsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchhardwarePtzSettingsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/hardwarePtzSettings/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchinputEventsById operation.
     * @callback moduleapi/DeviceConfigApi~patchinputEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Input
     * Input
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEvents} opts.body 
     * @param {module:api/DeviceConfigApi~patchinputEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchinputEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchinputEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/inputEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmetadataById operation.
     * @callback moduleapi/DeviceConfigApi~patchmetadataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Metadata
     * Metadata
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Metadata} opts.body 
     * @param {module:api/DeviceConfigApi~patchmetadataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmetadataById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmetadataById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200101;

      return this.apiClient.callApi(
        '/metadata/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmicrophonesById operation.
     * @callback moduleapi/DeviceConfigApi~patchmicrophonesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Microphone
     * Microphone
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Microphones} opts.body 
     * @param {module:api/DeviceConfigApi~patchmicrophonesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmicrophonesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmicrophonesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200105;

      return this.apiClient.callApi(
        '/microphones/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchoutputsById operation.
     * @callback moduleapi/DeviceConfigApi~patchoutputsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Output
     * Output
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Outputs} opts.body 
     * @param {module:api/DeviceConfigApi~patchoutputsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchoutputsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchoutputsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200117;

      return this.apiClient.callApi(
        '/outputs/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchspeakersById operation.
     * @callback moduleapi/DeviceConfigApi~patchspeakersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Speaker
     * Speaker
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Speakers} opts.body 
     * @param {module:api/DeviceConfigApi~patchspeakersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchspeakersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchspeakersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/speakers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchstreamsById operation.
     * @callback moduleapi/DeviceConfigApi~patchstreamsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200160{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Stream
     * Stream
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Streams} opts.body 
     * @param {module:api/DeviceConfigApi~patchstreamsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchstreamsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchstreamsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200160;

      return this.apiClient.callApi(
        '/streams/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForcameras operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForcamerasCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Camera
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetOtherRecordingServersWithMedia, or task&#x3D;GetOtherRecordingStoragesWithMedia, or task&#x3D;RetrieveEdgeStorage, or task&#x3D;TruncateStorage, or task&#x3D;TruncateStorageOnOtherRecordingServer, or task&#x3D;ChangeDeviceRecordingStorage, or task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/CamerasIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForcamerasCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForcameras(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForcameras");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForcameras");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/cameras/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForhardware operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20066{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Hardware
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ReadPasswordHardware, or task&#x3D;ChangePasswordHardware, or task&#x3D;UpdateFirmwareHardware, or task&#x3D;MoveHardware, or task&#x3D;UpdateHardware
     * @param {Object} opts Optional parameters
     * @param {module:model/HardwareIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForhardware(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForhardware");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForhardware");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20066;

      return this.apiClient.callApi(
        '/hardware/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForinputEvents operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForinputEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Input
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSecurityPermissionsRequestBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForinputEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForinputEvents(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForinputEvents");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForinputEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/inputEvents/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskFormetadata operation.
     * @callback moduleapi/DeviceConfigApi~postTaskFormetadataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Metadata
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetOtherRecordingServersWithMedia, or task&#x3D;GetOtherRecordingStoragesWithMedia, or task&#x3D;RetrieveEdgeStorage, or task&#x3D;TruncateStorage, or task&#x3D;TruncateStorageOnOtherRecordingServer, or task&#x3D;ChangeDeviceRecordingStorage, or task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/MetadataIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskFormetadataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskFormetadata(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskFormetadata");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskFormetadata");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/metadata/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskFormicrophones operation.
     * @callback moduleapi/DeviceConfigApi~postTaskFormicrophonesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Microphone
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetOtherRecordingServersWithMedia, or task&#x3D;GetOtherRecordingStoragesWithMedia, or task&#x3D;RetrieveEdgeStorage, or task&#x3D;TruncateStorage, or task&#x3D;TruncateStorageOnOtherRecordingServer, or task&#x3D;ChangeDeviceRecordingStorage, or task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/MicrophonesIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskFormicrophonesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskFormicrophones(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskFormicrophones");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskFormicrophones");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/microphones/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForoutputs operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForoutputsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Output
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSecurityPermissionsRequestBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForoutputsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForoutputs(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForoutputs");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForoutputs");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/outputs/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForspeakers operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForspeakersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20029{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Speaker
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetOtherRecordingServersWithMedia, or task&#x3D;GetOtherRecordingStoragesWithMedia, or task&#x3D;RetrieveEdgeStorage, or task&#x3D;TruncateStorage, or task&#x3D;TruncateStorageOnOtherRecordingServer, or task&#x3D;ChangeDeviceRecordingStorage, or task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/SpeakersIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForspeakersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForspeakers(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForspeakers");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForspeakers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20029;

      return this.apiClient.callApi(
        '/speakers/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForstreams operation.
     * @callback moduleapi/DeviceConfigApi~postTaskForstreamsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200161{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Stream
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;AddStream, or task&#x3D;RemoveStream
     * @param {Object} opts Optional parameters
     * @param {module:model/StreamsIdBody} opts.body 
     * @param {module:api/DeviceConfigApi~postTaskForstreamsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForstreams(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForstreams");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForstreams");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200161;

      return this.apiClient.callApi(
        '/streams/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postcamerasByIdpatrollingProfiles operation.
     * @callback moduleapi/DeviceConfigApi~postcamerasByIdpatrollingProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a patrollingProfiles to a cameras
     * Camera
     * @param {String} id Id of the camera object
     * @param {Object} opts Optional parameters
     * @param {module:model/PatrollingProfiles} opts.body 
     * @param {module:api/DeviceConfigApi~postcamerasByIdpatrollingProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postcamerasByIdpatrollingProfiles(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postcamerasByIdpatrollingProfiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2014;

      return this.apiClient.callApi(
        '/cameras/{id}/patrollingProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postcamerasByIdptzPresets operation.
     * @callback moduleapi/DeviceConfigApi~postcamerasByIdptzPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20038{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a ptzPresets to a cameras, or task&#x3D;DefaultPtzPreset, or task&#x3D;GetDevicePresets
     * Camera, or perform a task
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/IdPtzPresetsBody} opts.body 
     * @param {module:api/DeviceConfigApi~postcamerasByIdptzPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postcamerasByIdptzPresets(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postcamerasByIdptzPresets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20038;

      return this.apiClient.callApi(
        '/cameras/{id}/ptzPresets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putcamerasById operation.
     * @callback moduleapi/DeviceConfigApi~putcamerasByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20028{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Camera
     * Camera
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Cameras} opts.body 
     * @param {module:api/DeviceConfigApi~putcamerasByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putcamerasById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putcamerasById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20028;

      return this.apiClient.callApi(
        '/cameras/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puthardwareById operation.
     * @callback moduleapi/DeviceConfigApi~puthardwareByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20065{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Hardware
     * Hardware
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Hardware} opts.body 
     * @param {module:api/DeviceConfigApi~puthardwareByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puthardwareById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puthardwareById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/hardware/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puthardwareDeviceEventsById operation.
     * @callback moduleapi/DeviceConfigApi~puthardwareDeviceEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20075{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Hardware device event
     * Hardware device event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/HardwareDeviceEvents} opts.body 
     * @param {module:api/DeviceConfigApi~puthardwareDeviceEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puthardwareDeviceEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puthardwareDeviceEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20075;

      return this.apiClient.callApi(
        '/hardwareDeviceEvents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puthardwarePtzSettingsById operation.
     * @callback moduleapi/DeviceConfigApi~puthardwarePtzSettingsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20077{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on PTZ
     * PTZ
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/HardwarePtzSettings} opts.body 
     * @param {module:api/DeviceConfigApi~puthardwarePtzSettingsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puthardwarePtzSettingsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puthardwarePtzSettingsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20077;

      return this.apiClient.callApi(
        '/hardwarePtzSettings/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putinputEventsById operation.
     * @callback moduleapi/DeviceConfigApi~putinputEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20079{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Input
     * Input
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/InputEvents} opts.body 
     * @param {module:api/DeviceConfigApi~putinputEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putinputEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putinputEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20079;

      return this.apiClient.callApi(
        '/inputEvents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmetadataById operation.
     * @callback moduleapi/DeviceConfigApi~putmetadataByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200101{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Metadata
     * Metadata
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Metadata} opts.body 
     * @param {module:api/DeviceConfigApi~putmetadataByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmetadataById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmetadataById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200101;

      return this.apiClient.callApi(
        '/metadata/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmicrophonesById operation.
     * @callback moduleapi/DeviceConfigApi~putmicrophonesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200105{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Microphone
     * Microphone
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Microphones} opts.body 
     * @param {module:api/DeviceConfigApi~putmicrophonesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmicrophonesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmicrophonesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200105;

      return this.apiClient.callApi(
        '/microphones/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putoutputsById operation.
     * @callback moduleapi/DeviceConfigApi~putoutputsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200117{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Output
     * Output
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Outputs} opts.body 
     * @param {module:api/DeviceConfigApi~putoutputsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putoutputsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putoutputsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200117;

      return this.apiClient.callApi(
        '/outputs/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putspeakersById operation.
     * @callback moduleapi/DeviceConfigApi~putspeakersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200151{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Speaker
     * Speaker
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Speakers} opts.body 
     * @param {module:api/DeviceConfigApi~putspeakersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putspeakersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putspeakersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200151;

      return this.apiClient.callApi(
        '/speakers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putstreamsById operation.
     * @callback moduleapi/DeviceConfigApi~putstreamsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200160{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Stream
     * Stream
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Streams} opts.body 
     * @param {module:api/DeviceConfigApi~putstreamsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putstreamsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putstreamsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200160;

      return this.apiClient.callApi(
        '/streams/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
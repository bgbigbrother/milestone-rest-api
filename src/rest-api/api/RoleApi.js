/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {BasicUsers} from '../model/BasicUsers';
import {ChangePasswordBasicUserRequestBody} from '../model/ChangePasswordBasicUserRequestBody';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {IdUsersBody} from '../model/IdUsersBody';
import {InlineResponse200135} from '../model/InlineResponse200135';
import {InlineResponse200136} from '../model/InlineResponse200136';
import {InlineResponse200137} from '../model/InlineResponse200137';
import {InlineResponse200138} from '../model/InlineResponse200138';
import {InlineResponse200139} from '../model/InlineResponse200139';
import {InlineResponse200140} from '../model/InlineResponse200140';
import {InlineResponse20022} from '../model/InlineResponse20022';
import {InlineResponse20023} from '../model/InlineResponse20023';
import {InlineResponse20024} from '../model/InlineResponse20024';
import {InlineResponse20025} from '../model/InlineResponse20025';
import {InlineResponse20122} from '../model/InlineResponse20122';
import {InlineResponse2013} from '../model/InlineResponse2013';
import {Roles} from '../model/Roles';
import {RolesBody} from '../model/RolesBody';
import {RolesIdBody} from '../model/RolesIdBody';

/**
* Role service.
* @module api/RoleApi
* @version 1.0.0
*/
export class RoleApi {

    /**
    * Constructs a new RoleApi. 
    * @alias module:api/RoleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletebasicUsersById operation.
     * @callback moduleapi/RoleApi~deletebasicUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a basicUsers
     * Basic user
     * @param {String} id Id of the object
     * @param {module:api/RoleApi~deletebasicUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletebasicUsersById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletebasicUsersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/basicUsers/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleterolesById operation.
     * @callback moduleapi/RoleApi~deleterolesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20122{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a roles
     * Role
     * @param {String} id Id of the object
     * @param {module:api/RoleApi~deleterolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleterolesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleterolesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20122;

      return this.apiClient.callApi(
        '/roles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllbasicUsers operation.
     * @callback moduleapi/RoleApi~getAllbasicUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20022{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Basic user
     * Basic user
     * @param {module:api/RoleApi~getAllbasicUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllbasicUsers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20022;

      return this.apiClient.callApi(
        '/basicUsers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclaimsInAbasicUsers operation.
     * @callback moduleapi/RoleApi~getAllclaimsInAbasicUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all claims
     * Basic user
     * @param {String} id Id of the basicUser object
     * @param {module:api/RoleApi~getAllclaimsInAbasicUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclaimsInAbasicUsers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclaimsInAbasicUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/basicUsers/{id}/claims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclaimsInAroles operation.
     * @callback moduleapi/RoleApi~getAllclaimsInArolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20025{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all claims
     * Role
     * @param {String} id Id of the role object
     * @param {module:api/RoleApi~getAllclaimsInArolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclaimsInAroles(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllclaimsInAroles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20025;

      return this.apiClient.callApi(
        '/roles/{id}/claims', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllroles operation.
     * @callback moduleapi/RoleApi~getAllrolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200135{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Role
     * Role
     * @param {module:api/RoleApi~getAllrolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllroles(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200135;

      return this.apiClient.callApi(
        '/roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllusersInAroles operation.
     * @callback moduleapi/RoleApi~getAllusersInArolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200139{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all users
     * Role
     * @param {String} id Id of the object
     * @param {module:api/RoleApi~getAllusersInArolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllusersInAroles(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllusersInAroles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200139;

      return this.apiClient.callApi(
        '/roles/{id}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOneusersInAroles operation.
     * @callback moduleapi/RoleApi~getOneusersInArolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200139{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific users
     * Role
     * @param {String} idParent Id of the role object
     * @param {String} id Id of the user object
     * @param {module:api/RoleApi~getOneusersInArolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOneusersInAroles(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOneusersInAroles");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOneusersInAroles");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200139;

      return this.apiClient.callApi(
        '/roles/{idParent}/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getbasicUsersById operation.
     * @callback moduleapi/RoleApi~getbasicUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20023{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Basic user
     * Basic user
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RoleApi~getbasicUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getbasicUsersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getbasicUsersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20023;

      return this.apiClient.callApi(
        '/basicUsers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getrolesById operation.
     * @callback moduleapi/RoleApi~getrolesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200137{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Role
     * Role
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RoleApi~getrolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getrolesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getrolesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200137;

      return this.apiClient.callApi(
        '/roles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchbasicUsersById operation.
     * @callback moduleapi/RoleApi~patchbasicUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Basic user
     * Basic user
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicUsers} opts.body 
     * @param {module:api/RoleApi~patchbasicUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchbasicUsersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchbasicUsersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/basicUsers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchrolesById operation.
     * @callback moduleapi/RoleApi~patchrolesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20122{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Role
     * Role
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Roles} opts.body 
     * @param {module:api/RoleApi~patchrolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchrolesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchrolesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20122;

      return this.apiClient.callApi(
        '/roles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForbasicUsers operation.
     * @callback moduleapi/RoleApi~postTaskForbasicUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20024{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Basic user
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ChangePasswordBasicUser
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangePasswordBasicUserRequestBody} opts.body 
     * @param {module:api/RoleApi~postTaskForbasicUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForbasicUsers(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForbasicUsers");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForbasicUsers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20024;

      return this.apiClient.callApi(
        '/basicUsers/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForroles operation.
     * @callback moduleapi/RoleApi~postTaskForrolesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200138{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Role
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;SetClientTimeProfile, or task&#x3D;GetClientTimeProfile, or task&#x3D;SetClientProfile, or task&#x3D;ChangeOverallSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/RolesIdBody} opts.body 
     * @param {module:api/RoleApi~postTaskForrolesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForroles(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForroles");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForroles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200138;

      return this.apiClient.callApi(
        '/roles/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForrolesusers operation.
     * @callback moduleapi/RoleApi~postTaskForrolesusersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200140{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Role
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;AddRoleMember, or task&#x3D;RemoveRoleMember
     * @param {Object} opts Optional parameters
     * @param {module:model/IdUsersBody} opts.body 
     * @param {module:api/RoleApi~postTaskForrolesusersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForrolesusers(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForrolesusers");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForrolesusers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200140;

      return this.apiClient.callApi(
        '/roles/{id}/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postbasicUsersById operation.
     * @callback moduleapi/RoleApi~postbasicUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new basicUsers
     * Basic user
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicUsers} opts.body 
     * @param {module:api/RoleApi~postbasicUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postbasicUsersById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/basicUsers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postrolesById operation.
     * @callback moduleapi/RoleApi~postrolesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200136{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new roles, or task&#x3D;CopyRole
     * Role, or perform a task
     * @param {Object} opts Optional parameters
     * @param {module:model/RolesBody} opts.body 
     * @param {module:api/RoleApi~postrolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postrolesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200136;

      return this.apiClient.callApi(
        '/roles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putbasicUsersById operation.
     * @callback moduleapi/RoleApi~putbasicUsersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Basic user
     * Basic user
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/BasicUsers} opts.body 
     * @param {module:api/RoleApi~putbasicUsersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putbasicUsersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putbasicUsersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2013;

      return this.apiClient.callApi(
        '/basicUsers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putrolesById operation.
     * @callback moduleapi/RoleApi~putrolesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20122{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Role
     * Role
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Roles} opts.body 
     * @param {module:api/RoleApi~putrolesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putrolesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putrolesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20122;

      return this.apiClient.callApi(
        '/roles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
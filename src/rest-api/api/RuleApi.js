/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AudioMessages} from '../model/AudioMessages';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {InlineResponse200141} from '../model/InlineResponse200141';
import {InlineResponse200142} from '../model/InlineResponse200142';
import {InlineResponse20015} from '../model/InlineResponse20015';
import {InlineResponse20016} from '../model/InlineResponse20016';
import {InlineResponse200167} from '../model/InlineResponse200167';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse200171} from '../model/InlineResponse200171';
import {InlineResponse2012} from '../model/InlineResponse2012';
import {InlineResponse20123} from '../model/InlineResponse20123';
import {InlineResponse20127} from '../model/InlineResponse20127';
import {Rules} from '../model/Rules';
import {TimeProfiles} from '../model/TimeProfiles';

/**
* Rule service.
* @module api/RuleApi
* @version 1.0.0
*/
export class RuleApi {

    /**
    * Constructs a new RuleApi. 
    * @alias module:api/RuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteaudioMessagesById operation.
     * @callback moduleapi/RuleApi~deleteaudioMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a audioMessages
     * Audio message
     * @param {String} id Id of the object
     * @param {module:api/RuleApi~deleteaudioMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteaudioMessagesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteaudioMessagesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/audioMessages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleterulesById operation.
     * @callback moduleapi/RuleApi~deleterulesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20123{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a rules
     * Rule
     * @param {String} id Id of the object
     * @param {module:api/RuleApi~deleterulesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleterulesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleterulesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20123;

      return this.apiClient.callApi(
        '/rules/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletetimeProfilesById operation.
     * @callback moduleapi/RuleApi~deletetimeProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a timeProfiles
     * Time profile
     * @param {String} id Id of the object
     * @param {module:api/RuleApi~deletetimeProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletetimeProfilesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletetimeProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20127;

      return this.apiClient.callApi(
        '/timeProfiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaudioMessages operation.
     * @callback moduleapi/RuleApi~getAllaudioMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20015{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Audio message
     * Audio message
     * @param {module:api/RuleApi~getAllaudioMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaudioMessages(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20015;

      return this.apiClient.callApi(
        '/audioMessages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrules operation.
     * @callback moduleapi/RuleApi~getAllrulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200141{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Rule
     * Rule. To include disabled items add ?disabled to the request.
     * @param {module:api/RuleApi~getAllrulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrules(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200141;

      return this.apiClient.callApi(
        '/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlltimeProfiles operation.
     * @callback moduleapi/RuleApi~getAlltimeProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200167{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Time profile
     * Time profile
     * @param {module:api/RuleApi~getAlltimeProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlltimeProfiles(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200167;

      return this.apiClient.callApi(
        '/timeProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getaudioMessagesById operation.
     * @callback moduleapi/RuleApi~getaudioMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20016{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Audio message
     * Audio message
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RuleApi~getaudioMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getaudioMessagesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getaudioMessagesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20016;

      return this.apiClient.callApi(
        '/audioMessages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getrulesById operation.
     * @callback moduleapi/RuleApi~getrulesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200142{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Rule
     * Rule
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RuleApi~getrulesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getrulesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getrulesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200142;

      return this.apiClient.callApi(
        '/rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the gettimeProfilesById operation.
     * @callback moduleapi/RuleApi~gettimeProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200171{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Time profile
     * Time profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RuleApi~gettimeProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    gettimeProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling gettimeProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200171;

      return this.apiClient.callApi(
        '/timeProfiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchaudioMessagesById operation.
     * @callback moduleapi/RuleApi~patchaudioMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Audio message
     * Audio message
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AudioMessages} opts.body 
     * @param {module:api/RuleApi~patchaudioMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchaudioMessagesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchaudioMessagesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/audioMessages/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchrulesById operation.
     * @callback moduleapi/RuleApi~patchrulesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20123{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Rule
     * Rule
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Rules} opts.body 
     * @param {module:api/RuleApi~patchrulesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchrulesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchrulesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20123;

      return this.apiClient.callApi(
        '/rules/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchtimeProfilesById operation.
     * @callback moduleapi/RuleApi~patchtimeProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Time profile
     * Time profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeProfiles} opts.body 
     * @param {module:api/RuleApi~patchtimeProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchtimeProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchtimeProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20127;

      return this.apiClient.callApi(
        '/timeProfiles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForaudioMessages operation.
     * @callback moduleapi/RuleApi~postTaskForaudioMessagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Audio message
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetAudioMessageContent, or task&#x3D;SetAudioMessageContent
     * @param {module:api/RuleApi~postTaskForaudioMessagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForaudioMessages(id, task, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForaudioMessages");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForaudioMessages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/audioMessages/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postaudioMessagesById operation.
     * @callback moduleapi/RuleApi~postaudioMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new audioMessages
     * Audio message
     * @param {Object} opts Optional parameters
     * @param {module:model/AudioMessages} opts.body 
     * @param {module:api/RuleApi~postaudioMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postaudioMessagesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/audioMessages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postrulesById operation.
     * @callback moduleapi/RuleApi~postrulesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20123{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new rules
     * Rule
     * @param {Object} opts Optional parameters
     * @param {module:model/Rules} opts.body 
     * @param {module:api/RuleApi~postrulesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postrulesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20123;

      return this.apiClient.callApi(
        '/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the posttimeProfilesById operation.
     * @callback moduleapi/RuleApi~posttimeProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new timeProfiles
     * Time profile
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeProfiles} opts.body 
     * @param {module:api/RuleApi~posttimeProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    posttimeProfilesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20127;

      return this.apiClient.callApi(
        '/timeProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putaudioMessagesById operation.
     * @callback moduleapi/RuleApi~putaudioMessagesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Audio message
     * Audio message
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AudioMessages} opts.body 
     * @param {module:api/RuleApi~putaudioMessagesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putaudioMessagesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putaudioMessagesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2012;

      return this.apiClient.callApi(
        '/audioMessages/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putrulesById operation.
     * @callback moduleapi/RuleApi~putrulesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20123{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Rule
     * Rule
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Rules} opts.body 
     * @param {module:api/RuleApi~putrulesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putrulesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putrulesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20123;

      return this.apiClient.callApi(
        '/rules/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puttimeProfilesById operation.
     * @callback moduleapi/RuleApi~puttimeProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Time profile
     * Time profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/TimeProfiles} opts.body 
     * @param {module:api/RuleApi~puttimeProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puttimeProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puttimeProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20127;

      return this.apiClient.callApi(
        '/timeProfiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
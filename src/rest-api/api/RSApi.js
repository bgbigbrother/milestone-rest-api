/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {FailoverGroups} from '../model/FailoverGroups';
import {FailoverGroupsBody} from '../model/FailoverGroupsBody';
import {FailoverRecorders} from '../model/FailoverRecorders';
import {InlineResponse200122} from '../model/InlineResponse200122';
import {InlineResponse200123} from '../model/InlineResponse200123';
import {InlineResponse200124} from '../model/InlineResponse200124';
import {InlineResponse200125} from '../model/InlineResponse200125';
import {InlineResponse200126} from '../model/InlineResponse200126';
import {InlineResponse200127} from '../model/InlineResponse200127';
import {InlineResponse200128} from '../model/InlineResponse200128';
import {InlineResponse200129} from '../model/InlineResponse200129';
import {InlineResponse200130} from '../model/InlineResponse200130';
import {InlineResponse200131} from '../model/InlineResponse200131';
import {InlineResponse200132} from '../model/InlineResponse200132';
import {InlineResponse200133} from '../model/InlineResponse200133';
import {InlineResponse20052} from '../model/InlineResponse20052';
import {InlineResponse20053} from '../model/InlineResponse20053';
import {InlineResponse20054} from '../model/InlineResponse20054';
import {InlineResponse20055} from '../model/InlineResponse20055';
import {InlineResponse20056} from '../model/InlineResponse20056';
import {InlineResponse20057} from '../model/InlineResponse20057';
import {InlineResponse20063} from '../model/InlineResponse20063';
import {InlineResponse20065} from '../model/InlineResponse20065';
import {InlineResponse20121} from '../model/InlineResponse20121';
import {InlineResponse2018} from '../model/InlineResponse2018';
import {RecordingServerFailovers} from '../model/RecordingServerFailovers';
import {RecordingServerMulticasts} from '../model/RecordingServerMulticasts';
import {RecordingServers} from '../model/RecordingServers';
import {RecordingServersIdBody} from '../model/RecordingServersIdBody';
import {Storages} from '../model/Storages';

/**
* RS service.
* @module api/RSApi
* @version 1.0.0
*/
export class RSApi {

    /**
    * Constructs a new RSApi. 
    * @alias module:api/RSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletefailoverGroupsById operation.
     * @callback moduleapi/RSApi~deletefailoverGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a failoverGroups
     * Failover groups
     * @param {String} id Id of the object
     * @param {module:api/RSApi~deletefailoverGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletefailoverGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletefailoverGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2018;

      return this.apiClient.callApi(
        '/failoverGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleterecordingServersByIdhardware operation.
     * @callback moduleapi/RSApi~deleterecordingServersByIdhardwareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20065{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a hardware from a recordingServers
     * Recording Server
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/RSApi~deleterecordingServersByIdhardwareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleterecordingServersByIdhardware(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleterecordingServersByIdhardware");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleterecordingServersByIdhardware");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20065;

      return this.apiClient.callApi(
        '/recordingServers/{idParent}/hardware/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleterecordingServersByIdstorages operation.
     * @callback moduleapi/RSApi~deleterecordingServersByIdstoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20121{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a storages from a recordingServers
     * Recording Server
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/RSApi~deleterecordingServersByIdstoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleterecordingServersByIdstorages(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleterecordingServersByIdstorages");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleterecordingServersByIdstorages");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20121;

      return this.apiClient.callApi(
        '/recordingServers/{idParent}/storages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllfailoverGroups operation.
     * @callback moduleapi/RSApi~getAllfailoverGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20052{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Failover groups
     * Failover groups
     * @param {module:api/RSApi~getAllfailoverGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllfailoverGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20052;

      return this.apiClient.callApi(
        '/failoverGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllfailoverRecorders operation.
     * @callback moduleapi/RSApi~getAllfailoverRecordersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20055{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Failover recorders
     * Failover recorders. To include disabled items add ?disabled to the request.
     * @param {module:api/RSApi~getAllfailoverRecordersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllfailoverRecorders(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20055;

      return this.apiClient.callApi(
        '/failoverRecorders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllfailoverRecordersInAfailoverGroups operation.
     * @callback moduleapi/RSApi~getAllfailoverRecordersInAfailoverGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20055{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all failoverRecorders
     * Failover groups
     * @param {String} id Id of the failoverGroup object
     * @param {module:api/RSApi~getAllfailoverRecordersInAfailoverGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllfailoverRecordersInAfailoverGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllfailoverRecordersInAfailoverGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20055;

      return this.apiClient.callApi(
        '/failoverGroups/{id}/failoverRecorders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareDriversInArecordingServers operation.
     * @callback moduleapi/RSApi~getAllhardwareDriversInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200126{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardwareDrivers
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {module:api/RSApi~getAllhardwareDriversInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareDriversInArecordingServers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareDriversInArecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200126;

      return this.apiClient.callApi(
        '/recordingServers/{id}/hardwareDrivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllhardwareInArecordingServers operation.
     * @callback moduleapi/RSApi~getAllhardwareInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20063{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all hardware
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {module:api/RSApi~getAllhardwareInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllhardwareInArecordingServers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllhardwareInArecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20063;

      return this.apiClient.callApi(
        '/recordingServers/{id}/hardware', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServerFailovers operation.
     * @callback moduleapi/RSApi~getAllrecordingServerFailoversCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Failover settings
     * Failover settings
     * @param {module:api/RSApi~getAllrecordingServerFailoversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServerFailovers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200127;

      return this.apiClient.callApi(
        '/recordingServerFailovers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServerFailoversInArecordingServers operation.
     * @callback moduleapi/RSApi~getAllrecordingServerFailoversInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200127{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all recordingServerFailovers
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {module:api/RSApi~getAllrecordingServerFailoversInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServerFailoversInArecordingServers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllrecordingServerFailoversInArecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200127;

      return this.apiClient.callApi(
        '/recordingServers/{id}/recordingServerFailovers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServerMulticasts operation.
     * @callback moduleapi/RSApi~getAllrecordingServerMulticastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Multicast
     * Multicast. To include disabled items add ?disabled to the request.
     * @param {module:api/RSApi~getAllrecordingServerMulticastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServerMulticasts(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200128;

      return this.apiClient.callApi(
        '/recordingServerMulticasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServerMulticastsInArecordingServers operation.
     * @callback moduleapi/RSApi~getAllrecordingServerMulticastsInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all recordingServerMulticasts
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {module:api/RSApi~getAllrecordingServerMulticastsInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServerMulticastsInArecordingServers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllrecordingServerMulticastsInArecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200128;

      return this.apiClient.callApi(
        '/recordingServers/{id}/recordingServerMulticasts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllrecordingServers operation.
     * @callback moduleapi/RSApi~getAllrecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200122{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Recording Server
     * Recording Server. To include disabled items add ?disabled to the request.
     * @param {module:api/RSApi~getAllrecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllrecordingServers(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200122;

      return this.apiClient.callApi(
        '/recordingServers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllstoragesInArecordingServers operation.
     * @callback moduleapi/RSApi~getAllstoragesInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all storages
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {module:api/RSApi~getAllstoragesInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllstoragesInArecordingServers(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllstoragesInArecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200129;

      return this.apiClient.callApi(
        '/recordingServers/{id}/storages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnehardwareDriversInArecordingServers operation.
     * @callback moduleapi/RSApi~getOnehardwareDriversInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200126{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific hardwareDrivers
     * Recording Server
     * @param {String} idParent Id of the recordingServer object
     * @param {String} id Id of the hardwareDriver object
     * @param {module:api/RSApi~getOnehardwareDriversInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnehardwareDriversInArecordingServers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnehardwareDriversInArecordingServers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnehardwareDriversInArecordingServers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200126;

      return this.apiClient.callApi(
        '/recordingServers/{idParent}/hardwareDrivers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnestoragesInArecordingServers operation.
     * @callback moduleapi/RSApi~getOnestoragesInArecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific storages
     * Recording Server
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/RSApi~getOnestoragesInArecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnestoragesInArecordingServers(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnestoragesInArecordingServers");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnestoragesInArecordingServers");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200129;

      return this.apiClient.callApi(
        '/recordingServers/{idParent}/storages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getfailoverGroupsById operation.
     * @callback moduleapi/RSApi~getfailoverGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20054{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Failover groups
     * Failover groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RSApi~getfailoverGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getfailoverGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getfailoverGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20054;

      return this.apiClient.callApi(
        '/failoverGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getfailoverRecordersById operation.
     * @callback moduleapi/RSApi~getfailoverRecordersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20056{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Failover recorders
     * Failover recorders
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RSApi~getfailoverRecordersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getfailoverRecordersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getfailoverRecordersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20056;

      return this.apiClient.callApi(
        '/failoverRecorders/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getrecordingServerFailoversById operation.
     * @callback moduleapi/RSApi~getrecordingServerFailoversByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200130{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Failover settings
     * Failover settings
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RSApi~getrecordingServerFailoversByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getrecordingServerFailoversById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getrecordingServerFailoversById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200130;

      return this.apiClient.callApi(
        '/recordingServerFailovers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getrecordingServerMulticastsById operation.
     * @callback moduleapi/RSApi~getrecordingServerMulticastsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200132{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Multicast
     * Multicast
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RSApi~getrecordingServerMulticastsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getrecordingServerMulticastsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getrecordingServerMulticastsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200132;

      return this.apiClient.callApi(
        '/recordingServerMulticasts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getrecordingServersById operation.
     * @callback moduleapi/RSApi~getrecordingServersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200123{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Recording Server
     * Recording Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/RSApi~getrecordingServersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getrecordingServersById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getrecordingServersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200123;

      return this.apiClient.callApi(
        '/recordingServers/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchfailoverGroupsById operation.
     * @callback moduleapi/RSApi~patchfailoverGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Failover groups
     * Failover groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/FailoverGroups} opts.body 
     * @param {module:api/RSApi~patchfailoverGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchfailoverGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchfailoverGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2018;

      return this.apiClient.callApi(
        '/failoverGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchfailoverRecordersById operation.
     * @callback moduleapi/RSApi~patchfailoverRecordersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Failover recorders
     * Failover recorders
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/FailoverRecorders} opts.body 
     * @param {module:api/RSApi~patchfailoverRecordersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchfailoverRecordersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchfailoverRecordersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20057;

      return this.apiClient.callApi(
        '/failoverRecorders/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchrecordingServerFailoversById operation.
     * @callback moduleapi/RSApi~patchrecordingServerFailoversByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Failover settings
     * Failover settings
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServerFailovers} opts.body 
     * @param {module:api/RSApi~patchrecordingServerFailoversByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchrecordingServerFailoversById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchrecordingServerFailoversById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200131;

      return this.apiClient.callApi(
        '/recordingServerFailovers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchrecordingServerMulticastsById operation.
     * @callback moduleapi/RSApi~patchrecordingServerMulticastsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200133{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Multicast
     * Multicast
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServerMulticasts} opts.body 
     * @param {module:api/RSApi~patchrecordingServerMulticastsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchrecordingServerMulticastsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchrecordingServerMulticastsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200133;

      return this.apiClient.callApi(
        '/recordingServerMulticasts/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchrecordingServersById operation.
     * @callback moduleapi/RSApi~patchrecordingServersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Recording Server
     * Recording Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServers} opts.body 
     * @param {module:api/RSApi~patchrecordingServersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchrecordingServersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchrecordingServersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/recordingServers/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForrecordingServers operation.
     * @callback moduleapi/RSApi~postTaskForrecordingServersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200125{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Recording Server
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;AddHardware, or task&#x3D;GetOtherDevicesWithMediaOnRecorder, or task&#x3D;HardwareScan, or task&#x3D;HardwareScanExpress, or task&#x3D;LoadTasks
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServersIdBody} opts.body 
     * @param {module:api/RSApi~postTaskForrecordingServersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForrecordingServers(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForrecordingServers");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForrecordingServers");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200125;

      return this.apiClient.callApi(
        '/recordingServers/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postfailoverGroupsById operation.
     * @callback moduleapi/RSApi~postfailoverGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20053{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new failoverGroups, or task&#x3D;MoveFailoverGroup
     * Failover groups, or perform a task
     * @param {Object} opts Optional parameters
     * @param {module:model/FailoverGroupsBody} opts.body 
     * @param {module:api/RSApi~postfailoverGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postfailoverGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20053;

      return this.apiClient.callApi(
        '/failoverGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postrecordingServersByIdstorages operation.
     * @callback moduleapi/RSApi~postrecordingServersByIdstoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20121{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a storages to a recordingServers
     * Recording Server
     * @param {String} id Id of the recordingServer object
     * @param {Object} opts Optional parameters
     * @param {module:model/Storages} opts.body 
     * @param {module:api/RSApi~postrecordingServersByIdstoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postrecordingServersByIdstorages(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postrecordingServersByIdstorages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20121;

      return this.apiClient.callApi(
        '/recordingServers/{id}/storages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putfailoverGroupsById operation.
     * @callback moduleapi/RSApi~putfailoverGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2018{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Failover groups
     * Failover groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/FailoverGroups} opts.body 
     * @param {module:api/RSApi~putfailoverGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putfailoverGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putfailoverGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2018;

      return this.apiClient.callApi(
        '/failoverGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putfailoverRecordersById operation.
     * @callback moduleapi/RSApi~putfailoverRecordersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20057{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Failover recorders
     * Failover recorders
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/FailoverRecorders} opts.body 
     * @param {module:api/RSApi~putfailoverRecordersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putfailoverRecordersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putfailoverRecordersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20057;

      return this.apiClient.callApi(
        '/failoverRecorders/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putrecordingServerFailoversById operation.
     * @callback moduleapi/RSApi~putrecordingServerFailoversByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Failover settings
     * Failover settings
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServerFailovers} opts.body 
     * @param {module:api/RSApi~putrecordingServerFailoversByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putrecordingServerFailoversById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putrecordingServerFailoversById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200131;

      return this.apiClient.callApi(
        '/recordingServerFailovers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putrecordingServerMulticastsById operation.
     * @callback moduleapi/RSApi~putrecordingServerMulticastsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200133{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Multicast
     * Multicast
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServerMulticasts} opts.body 
     * @param {module:api/RSApi~putrecordingServerMulticastsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putrecordingServerMulticastsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putrecordingServerMulticastsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200133;

      return this.apiClient.callApi(
        '/recordingServerMulticasts/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putrecordingServersById operation.
     * @callback moduleapi/RSApi~putrecordingServersByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200124{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Recording Server
     * Recording Server
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/RecordingServers} opts.body 
     * @param {module:api/RSApi~putrecordingServersByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putrecordingServersById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putrecordingServersById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200124;

      return this.apiClient.callApi(
        '/recordingServers/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
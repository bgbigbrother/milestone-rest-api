/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ArchiveStorageInformation} from '../model/ArchiveStorageInformation';
import {ArchiveStorages} from '../model/ArchiveStorages';
import {ArchiveStoragesIdBody} from '../model/ArchiveStoragesIdBody';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {InlineResponse20011} from '../model/InlineResponse20011';
import {InlineResponse20012} from '../model/InlineResponse20012';
import {InlineResponse20013} from '../model/InlineResponse20013';
import {InlineResponse20014} from '../model/InlineResponse20014';
import {InlineResponse200154} from '../model/InlineResponse200154';
import {InlineResponse200155} from '../model/InlineResponse200155';
import {InlineResponse200156} from '../model/InlineResponse200156';
import {InlineResponse200157} from '../model/InlineResponse200157';
import {InlineResponse200158} from '../model/InlineResponse200158';
import {InlineResponse20126} from '../model/InlineResponse20126';
import {StorageInformation} from '../model/StorageInformation';
import {StoragesIdBody} from '../model/StoragesIdBody';

/**
* Storage service.
* @module api/StorageApi
* @version 1.0.0
*/
export class StorageApi {

    /**
    * Constructs a new StorageApi. 
    * @alias module:api/StorageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletestoragesByIdarchiveStorages operation.
     * @callback moduleapi/StorageApi~deletestoragesByIdarchiveStoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20126{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a archiveStorages from a storages
     * Storage
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/StorageApi~deletestoragesByIdarchiveStoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletestoragesByIdarchiveStorages(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletestoragesByIdarchiveStorages");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletestoragesByIdarchiveStorages");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20126;

      return this.apiClient.callApi(
        '/storages/{idParent}/archiveStorages/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllarchiveStorageInformation operation.
     * @callback moduleapi/StorageApi~getAllarchiveStorageInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20012{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all archiveStorageInformation
     * Get array of all archiveStorageInformation
     * @param {module:api/StorageApi~getAllarchiveStorageInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllarchiveStorageInformation(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20012;

      return this.apiClient.callApi(
        '/archiveStorageInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllarchiveStoragesInAstorages operation.
     * @callback moduleapi/StorageApi~getAllarchiveStoragesInAstoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all archiveStorages
     * Storage
     * @param {String} id Id of the storage object
     * @param {module:api/StorageApi~getAllarchiveStoragesInAstoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllarchiveStoragesInAstorages(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllarchiveStoragesInAstorages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200154;

      return this.apiClient.callApi(
        '/storages/{id}/archiveStorages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllstorageInformation operation.
     * @callback moduleapi/StorageApi~getAllstorageInformationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200156{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all storageInformation
     * Get array of all storageInformation
     * @param {module:api/StorageApi~getAllstorageInformationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllstorageInformation(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200156;

      return this.apiClient.callApi(
        '/storageInformation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnearchiveStoragesInAstorages operation.
     * @callback moduleapi/StorageApi~getOnearchiveStoragesInAstoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200154{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific archiveStorages
     * Storage
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/StorageApi~getOnearchiveStoragesInAstoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnearchiveStoragesInAstorages(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnearchiveStoragesInAstorages");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnearchiveStoragesInAstorages");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200154;

      return this.apiClient.callApi(
        '/storages/{idParent}/archiveStorages/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getarchiveStorageInformationById operation.
     * @callback moduleapi/StorageApi~getarchiveStorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20013{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of archiveStorageInformation
     * Get specific object of archiveStorageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/StorageApi~getarchiveStorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getarchiveStorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getarchiveStorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20013;

      return this.apiClient.callApi(
        '/archiveStorageInformation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getstorageInformationById operation.
     * @callback moduleapi/StorageApi~getstorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200157{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of storageInformation
     * Get specific object of storageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/StorageApi~getstorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getstorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getstorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200157;

      return this.apiClient.callApi(
        '/storageInformation/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patcharchiveStorageInformationById operation.
     * @callback moduleapi/StorageApi~patcharchiveStorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on archiveStorageInformation
     * Update provided fields on archiveStorageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveStorageInformation} opts.body 
     * @param {module:api/StorageApi~patcharchiveStorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patcharchiveStorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patcharchiveStorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/archiveStorageInformation/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchstorageInformationById operation.
     * @callback moduleapi/StorageApi~patchstorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200158{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on storageInformation
     * Update provided fields on storageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageInformation} opts.body 
     * @param {module:api/StorageApi~patchstorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchstorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchstorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200158;

      return this.apiClient.callApi(
        '/storageInformation/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForarchiveStorages operation.
     * @callback moduleapi/StorageApi~postTaskForarchiveStoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Archives
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ReadArchiveStorageInformation, or task&#x3D;SetFramerateReductionArchiveStorage, or task&#x3D;MoveArchiveStorage
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveStoragesIdBody} opts.body 
     * @param {module:api/StorageApi~postTaskForarchiveStoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForarchiveStorages(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForarchiveStorages");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForarchiveStorages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20011;

      return this.apiClient.callApi(
        '/archiveStorages/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForstorages operation.
     * @callback moduleapi/StorageApi~postTaskForstoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200155{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Storage
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetDevicesUsingStorage, or task&#x3D;ReadStorageInformation, or task&#x3D;SetStorageAsDefault, or task&#x3D;EnableEncryption, or task&#x3D;MoveRecordingStorage
     * @param {Object} opts Optional parameters
     * @param {module:model/StoragesIdBody} opts.body 
     * @param {module:api/StorageApi~postTaskForstoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForstorages(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForstorages");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForstorages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200155;

      return this.apiClient.callApi(
        '/storages/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the poststoragesByIdarchiveStorages operation.
     * @callback moduleapi/StorageApi~poststoragesByIdarchiveStoragesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20126{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a archiveStorages to a storages
     * Storage
     * @param {String} id Id of the storage object
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveStorages} opts.body 
     * @param {module:api/StorageApi~poststoragesByIdarchiveStoragesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    poststoragesByIdarchiveStorages(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling poststoragesByIdarchiveStorages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20126;

      return this.apiClient.callApi(
        '/storages/{id}/archiveStorages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putarchiveStorageInformationById operation.
     * @callback moduleapi/StorageApi~putarchiveStorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20014{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on archiveStorageInformation
     * Update all fields on archiveStorageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ArchiveStorageInformation} opts.body 
     * @param {module:api/StorageApi~putarchiveStorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putarchiveStorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putarchiveStorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20014;

      return this.apiClient.callApi(
        '/archiveStorageInformation/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putstorageInformationById operation.
     * @callback moduleapi/StorageApi~putstorageInformationByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200158{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on storageInformation
     * Update all fields on storageInformation
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/StorageInformation} opts.body 
     * @param {module:api/StorageApi~putstorageInformationByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putstorageInformationById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putstorageInformationById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200158;

      return this.apiClient.callApi(
        '/storageInformation/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AnalyticsEvents} from '../model/AnalyticsEvents';
import {ChangeSecurityPermissionsRequestBody} from '../model/ChangeSecurityPermissionsRequestBody';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {EventTypeGroups} from '../model/EventTypeGroups';
import {EventTypes} from '../model/EventTypes';
import {GenericEventDataSources} from '../model/GenericEventDataSources';
import {GenericEvents} from '../model/GenericEvents';
import {InlineResponse20010} from '../model/InlineResponse20010';
import {InlineResponse200174} from '../model/InlineResponse200174';
import {InlineResponse20044} from '../model/InlineResponse20044';
import {InlineResponse20045} from '../model/InlineResponse20045';
import {InlineResponse20046} from '../model/InlineResponse20046';
import {InlineResponse20047} from '../model/InlineResponse20047';
import {InlineResponse20048} from '../model/InlineResponse20048';
import {InlineResponse20049} from '../model/InlineResponse20049';
import {InlineResponse20050} from '../model/InlineResponse20050';
import {InlineResponse20051} from '../model/InlineResponse20051';
import {InlineResponse20058} from '../model/InlineResponse20058';
import {InlineResponse20059} from '../model/InlineResponse20059';
import {InlineResponse20060} from '../model/InlineResponse20060';
import {InlineResponse20080} from '../model/InlineResponse20080';
import {InlineResponse2009} from '../model/InlineResponse2009';
import {InlineResponse2011} from '../model/InlineResponse2011';
import {InlineResponse20110} from '../model/InlineResponse20110';
import {InlineResponse20128} from '../model/InlineResponse20128';
import {InlineResponse2019} from '../model/InlineResponse2019';
import {UserDefinedEvents} from '../model/UserDefinedEvents';

/**
* Events service.
* @module api/EventsApi
* @version 1.0.0
*/
export class EventsApi {

    /**
    * Constructs a new EventsApi. 
    * @alias module:api/EventsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteanalyticsEventsById operation.
     * @callback moduleapi/EventsApi~deleteanalyticsEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a analyticsEvents
     * Analytics event
     * @param {String} id Id of the object
     * @param {module:api/EventsApi~deleteanalyticsEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteanalyticsEventsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteanalyticsEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/analyticsEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletegenericEventDataSourcesById operation.
     * @callback moduleapi/EventsApi~deletegenericEventDataSourcesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a genericEventDataSources
     * Generic event data sources
     * @param {String} id Id of the object
     * @param {module:api/EventsApi~deletegenericEventDataSourcesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletegenericEventDataSourcesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletegenericEventDataSourcesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/genericEventDataSources/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletegenericEventsById operation.
     * @callback moduleapi/EventsApi~deletegenericEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a genericEvents
     * Generic events
     * @param {String} id Id of the object
     * @param {module:api/EventsApi~deletegenericEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletegenericEventsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletegenericEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/genericEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteuserDefinedEventsById operation.
     * @callback moduleapi/EventsApi~deleteuserDefinedEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a userDefinedEvents
     * User-defined event
     * @param {String} id Id of the object
     * @param {module:api/EventsApi~deleteuserDefinedEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteuserDefinedEventsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteuserDefinedEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20128;

      return this.apiClient.callApi(
        '/userDefinedEvents/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllanalyticsEvents operation.
     * @callback moduleapi/EventsApi~getAllanalyticsEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Analytics event
     * Analytics event
     * @param {module:api/EventsApi~getAllanalyticsEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllanalyticsEvents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/analyticsEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllanalyticsEventsInAeventTypeGroups operation.
     * @callback moduleapi/EventsApi~getAllanalyticsEventsInAeventTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2009{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all analyticsEvents
     * Event Group
     * @param {String} id Id of the eventTypeGroup object
     * @param {module:api/EventsApi~getAllanalyticsEventsInAeventTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllanalyticsEventsInAeventTypeGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllanalyticsEventsInAeventTypeGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2009;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}/analyticsEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlleventTypeGroups operation.
     * @callback moduleapi/EventsApi~getAlleventTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20046{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Event Group
     * Event Group
     * @param {module:api/EventsApi~getAlleventTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlleventTypeGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20046;

      return this.apiClient.callApi(
        '/eventTypeGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlleventTypesInAeventTypeGroups operation.
     * @callback moduleapi/EventsApi~getAlleventTypesInAeventTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20049{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all eventTypes
     * Event Group
     * @param {String} id Id of the eventTypeGroup object
     * @param {module:api/EventsApi~getAlleventTypesInAeventTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlleventTypesInAeventTypeGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlleventTypesInAeventTypeGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20049;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}/eventTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgenericEventDataSources operation.
     * @callback moduleapi/EventsApi~getAllgenericEventDataSourcesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20059{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Generic event data sources
     * Generic event data sources. To include disabled items add ?disabled to the request.
     * @param {module:api/EventsApi~getAllgenericEventDataSourcesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgenericEventDataSources(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20059;

      return this.apiClient.callApi(
        '/genericEventDataSources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgenericEvents operation.
     * @callback moduleapi/EventsApi~getAllgenericEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Generic events
     * Generic events. To include disabled items add ?disabled to the request.
     * @param {module:api/EventsApi~getAllgenericEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgenericEvents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/genericEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgenericEventsInAeventTypeGroups operation.
     * @callback moduleapi/EventsApi~getAllgenericEventsInAeventTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20050{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all genericEvents
     * Event Group
     * @param {String} id Id of the eventTypeGroup object
     * @param {module:api/EventsApi~getAllgenericEventsInAeventTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgenericEventsInAeventTypeGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllgenericEventsInAeventTypeGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20050;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}/genericEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlluserDefinedEvents operation.
     * @callback moduleapi/EventsApi~getAlluserDefinedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all User-defined event
     * User-defined event
     * @param {module:api/EventsApi~getAlluserDefinedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlluserDefinedEvents(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20051;

      return this.apiClient.callApi(
        '/userDefinedEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlluserDefinedEventsInAeventTypeGroups operation.
     * @callback moduleapi/EventsApi~getAlluserDefinedEventsInAeventTypeGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20051{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all userDefinedEvents
     * Event Group
     * @param {String} id Id of the eventTypeGroup object
     * @param {module:api/EventsApi~getAlluserDefinedEventsInAeventTypeGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlluserDefinedEventsInAeventTypeGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlluserDefinedEventsInAeventTypeGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20051;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}/userDefinedEvents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getanalyticsEventsById operation.
     * @callback moduleapi/EventsApi~getanalyticsEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20010{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Analytics event
     * Analytics event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~getanalyticsEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getanalyticsEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getanalyticsEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20010;

      return this.apiClient.callApi(
        '/analyticsEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the geteventTypeGroupsById operation.
     * @callback moduleapi/EventsApi~geteventTypeGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20047{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Event Group
     * Event Group
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~geteventTypeGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    geteventTypeGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geteventTypeGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20047;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the geteventTypesById operation.
     * @callback moduleapi/EventsApi~geteventTypesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20044{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Events
     * Events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~geteventTypesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    geteventTypesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling geteventTypesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20044;

      return this.apiClient.callApi(
        '/eventTypes/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getgenericEventDataSourcesById operation.
     * @callback moduleapi/EventsApi~getgenericEventDataSourcesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20060{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Generic event data sources
     * Generic event data sources
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~getgenericEventDataSourcesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getgenericEventDataSourcesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getgenericEventDataSourcesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20060;

      return this.apiClient.callApi(
        '/genericEventDataSources/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getgenericEventsById operation.
     * @callback moduleapi/EventsApi~getgenericEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20058{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Generic events
     * Generic events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~getgenericEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getgenericEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getgenericEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20058;

      return this.apiClient.callApi(
        '/genericEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getuserDefinedEventsById operation.
     * @callback moduleapi/EventsApi~getuserDefinedEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200174{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of User-defined event
     * User-defined event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/EventsApi~getuserDefinedEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getuserDefinedEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getuserDefinedEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200174;

      return this.apiClient.callApi(
        '/userDefinedEvents/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchanalyticsEventsById operation.
     * @callback moduleapi/EventsApi~patchanalyticsEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Analytics event
     * Analytics event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AnalyticsEvents} opts.body 
     * @param {module:api/EventsApi~patchanalyticsEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchanalyticsEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchanalyticsEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/analyticsEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patcheventTypeGroupsById operation.
     * @callback moduleapi/EventsApi~patcheventTypeGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Event Group
     * Event Group
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/EventTypeGroups} opts.body 
     * @param {module:api/EventsApi~patcheventTypeGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patcheventTypeGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patcheventTypeGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20048;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patcheventTypesById operation.
     * @callback moduleapi/EventsApi~patcheventTypesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Events
     * Events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/EventTypes} opts.body 
     * @param {module:api/EventsApi~patcheventTypesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patcheventTypesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patcheventTypesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/eventTypes/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchgenericEventDataSourcesById operation.
     * @callback moduleapi/EventsApi~patchgenericEventDataSourcesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Generic event data sources
     * Generic event data sources
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEventDataSources} opts.body 
     * @param {module:api/EventsApi~patchgenericEventDataSourcesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchgenericEventDataSourcesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchgenericEventDataSourcesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/genericEventDataSources/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchgenericEventsById operation.
     * @callback moduleapi/EventsApi~patchgenericEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Generic events
     * Generic events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEvents} opts.body 
     * @param {module:api/EventsApi~patchgenericEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchgenericEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchgenericEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/genericEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchuserDefinedEventsById operation.
     * @callback moduleapi/EventsApi~patchuserDefinedEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on User-defined event
     * User-defined event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDefinedEvents} opts.body 
     * @param {module:api/EventsApi~patchuserDefinedEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchuserDefinedEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchuserDefinedEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20128;

      return this.apiClient.callApi(
        '/userDefinedEvents/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForuserDefinedEvents operation.
     * @callback moduleapi/EventsApi~postTaskForuserDefinedEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * User-defined event
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSecurityPermissionsRequestBody} opts.body 
     * @param {module:api/EventsApi~postTaskForuserDefinedEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForuserDefinedEvents(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForuserDefinedEvents");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForuserDefinedEvents");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/userDefinedEvents/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postanalyticsEventsById operation.
     * @callback moduleapi/EventsApi~postanalyticsEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new analyticsEvents
     * Analytics event
     * @param {Object} opts Optional parameters
     * @param {module:model/AnalyticsEvents} opts.body 
     * @param {module:api/EventsApi~postanalyticsEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postanalyticsEventsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/analyticsEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postgenericEventDataSourcesById operation.
     * @callback moduleapi/EventsApi~postgenericEventDataSourcesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new genericEventDataSources
     * Generic event data sources
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEventDataSources} opts.body 
     * @param {module:api/EventsApi~postgenericEventDataSourcesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postgenericEventDataSourcesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/genericEventDataSources', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postgenericEventsById operation.
     * @callback moduleapi/EventsApi~postgenericEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new genericEvents
     * Generic events
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEvents} opts.body 
     * @param {module:api/EventsApi~postgenericEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postgenericEventsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/genericEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postuserDefinedEventsById operation.
     * @callback moduleapi/EventsApi~postuserDefinedEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new userDefinedEvents
     * User-defined event
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDefinedEvents} opts.body 
     * @param {module:api/EventsApi~postuserDefinedEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postuserDefinedEventsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20128;

      return this.apiClient.callApi(
        '/userDefinedEvents', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putanalyticsEventsById operation.
     * @callback moduleapi/EventsApi~putanalyticsEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2011{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Analytics event
     * Analytics event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AnalyticsEvents} opts.body 
     * @param {module:api/EventsApi~putanalyticsEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putanalyticsEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putanalyticsEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2011;

      return this.apiClient.callApi(
        '/analyticsEvents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puteventTypeGroupsById operation.
     * @callback moduleapi/EventsApi~puteventTypeGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20048{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Event Group
     * Event Group
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/EventTypeGroups} opts.body 
     * @param {module:api/EventsApi~puteventTypeGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puteventTypeGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puteventTypeGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20048;

      return this.apiClient.callApi(
        '/eventTypeGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the puteventTypesById operation.
     * @callback moduleapi/EventsApi~puteventTypesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20045{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Events
     * Events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/EventTypes} opts.body 
     * @param {module:api/EventsApi~puteventTypesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    puteventTypesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling puteventTypesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20045;

      return this.apiClient.callApi(
        '/eventTypes/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putgenericEventDataSourcesById operation.
     * @callback moduleapi/EventsApi~putgenericEventDataSourcesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Generic event data sources
     * Generic event data sources
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEventDataSources} opts.body 
     * @param {module:api/EventsApi~putgenericEventDataSourcesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putgenericEventDataSourcesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putgenericEventDataSourcesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20110;

      return this.apiClient.callApi(
        '/genericEventDataSources/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putgenericEventsById operation.
     * @callback moduleapi/EventsApi~putgenericEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2019{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Generic events
     * Generic events
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GenericEvents} opts.body 
     * @param {module:api/EventsApi~putgenericEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putgenericEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putgenericEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2019;

      return this.apiClient.callApi(
        '/genericEvents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putuserDefinedEventsById operation.
     * @callback moduleapi/EventsApi~putuserDefinedEventsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20128{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on User-defined event
     * User-defined event
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/UserDefinedEvents} opts.body 
     * @param {module:api/EventsApi~putuserDefinedEventsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putuserDefinedEventsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putuserDefinedEventsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20128;

      return this.apiClient.callApi(
        '/userDefinedEvents/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
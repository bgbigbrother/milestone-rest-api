/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ChangeSecurityPermissionsRequestBody} from '../model/ChangeSecurityPermissionsRequestBody';
import {ClientProfiles} from '../model/ClientProfiles';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {GisMapLocations} from '../model/GisMapLocations';
import {InlineResponse200114} from '../model/InlineResponse200114';
import {InlineResponse200115} from '../model/InlineResponse200115';
import {InlineResponse200143} from '../model/InlineResponse200143';
import {InlineResponse200144} from '../model/InlineResponse200144';
import {InlineResponse200145} from '../model/InlineResponse200145';
import {InlineResponse200169} from '../model/InlineResponse200169';
import {InlineResponse20017} from '../model/InlineResponse20017';
import {InlineResponse200170} from '../model/InlineResponse200170';
import {InlineResponse200175} from '../model/InlineResponse200175';
import {InlineResponse200176} from '../model/InlineResponse200176';
import {InlineResponse200177} from '../model/InlineResponse200177';
import {InlineResponse200178} from '../model/InlineResponse200178';
import {InlineResponse200179} from '../model/InlineResponse200179';
import {InlineResponse200180} from '../model/InlineResponse200180';
import {InlineResponse200181} from '../model/InlineResponse200181';
import {InlineResponse200182} from '../model/InlineResponse200182';
import {InlineResponse200183} from '../model/InlineResponse200183';
import {InlineResponse20042} from '../model/InlineResponse20042';
import {InlineResponse20043} from '../model/InlineResponse20043';
import {InlineResponse20061} from '../model/InlineResponse20061';
import {InlineResponse20062} from '../model/InlineResponse20062';
import {InlineResponse20080} from '../model/InlineResponse20080';
import {InlineResponse20083} from '../model/InlineResponse20083';
import {InlineResponse20084} from '../model/InlineResponse20084';
import {InlineResponse20085} from '../model/InlineResponse20085';
import {InlineResponse20086} from '../model/InlineResponse20086';
import {InlineResponse20111} from '../model/InlineResponse20111';
import {InlineResponse20113} from '../model/InlineResponse20113';
import {InlineResponse20124} from '../model/InlineResponse20124';
import {InlineResponse20129} from '../model/InlineResponse20129';
import {InlineResponse20130} from '../model/InlineResponse20130';
import {InlineResponse20131} from '../model/InlineResponse20131';
import {InlineResponse20132} from '../model/InlineResponse20132';
import {InlineResponse2017} from '../model/InlineResponse2017';
import {LayoutGroups} from '../model/LayoutGroups';
import {Layouts} from '../model/Layouts';
import {Monitors} from '../model/Monitors';
import {MonitorsIdBody} from '../model/MonitorsIdBody';
import {SaveSearches} from '../model/SaveSearches';
import {SaveSearchesBody} from '../model/SaveSearchesBody';
import {VideoWallPresets} from '../model/VideoWallPresets';
import {VideoWalls} from '../model/VideoWalls';
import {ViewGroups} from '../model/ViewGroups';
import {Views} from '../model/Views';

/**
* Client service.
* @module api/ClientApi
* @version 1.0.0
*/
export class ClientApi {

    /**
    * Constructs a new ClientApi. 
    * @alias module:api/ClientApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteclientProfilesById operation.
     * @callback moduleapi/ClientApi~deleteclientProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a clientProfiles
     * Client profile
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deleteclientProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteclientProfilesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteclientProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/clientProfiles/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletegisMapLocationsById operation.
     * @callback moduleapi/ClientApi~deletegisMapLocationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a gisMapLocations
     * GIS map locations
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletegisMapLocationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletegisMapLocationsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletegisMapLocationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/gisMapLocations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletelayoutGroupsByIdlayouts operation.
     * @callback moduleapi/ClientApi~deletelayoutGroupsByIdlayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20113{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a layouts from a layoutGroups
     * Remove a layouts from a layoutGroups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletelayoutGroupsByIdlayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletelayoutGroupsByIdlayouts(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletelayoutGroupsByIdlayouts");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletelayoutGroupsByIdlayouts");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20113;

      return this.apiClient.callApi(
        '/layoutGroups/{idParent}/layouts/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletesaveSearchesById operation.
     * @callback moduleapi/ClientApi~deletesaveSearchesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20124{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a saveSearches
     * Delete a saveSearches
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletesaveSearchesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletesaveSearchesById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletesaveSearchesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20124;

      return this.apiClient.callApi(
        '/saveSearches/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletevideoWallsById operation.
     * @callback moduleapi/ClientApi~deletevideoWallsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a videoWalls
     * Video wall
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletevideoWallsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletevideoWallsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletevideoWallsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20129;

      return this.apiClient.callApi(
        '/videoWalls/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletevideoWallsByIdmonitors operation.
     * @callback moduleapi/ClientApi~deletevideoWallsByIdmonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20130{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a monitors from a videoWalls
     * Video wall
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletevideoWallsByIdmonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletevideoWallsByIdmonitors(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletevideoWallsByIdmonitors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletevideoWallsByIdmonitors");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20130;

      return this.apiClient.callApi(
        '/videoWalls/{idParent}/monitors/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletevideoWallsByIdvideoWallPresets operation.
     * @callback moduleapi/ClientApi~deletevideoWallsByIdvideoWallPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a videoWallPresets from a videoWalls
     * Video wall
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deletevideoWallsByIdvideoWallPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletevideoWallsByIdvideoWallPresets(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletevideoWallsByIdvideoWallPresets");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletevideoWallsByIdvideoWallPresets");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20131;

      return this.apiClient.callApi(
        '/videoWalls/{idParent}/videoWallPresets/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteviewGroupsById operation.
     * @callback moduleapi/ClientApi~deleteviewGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20132{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a viewGroups
     * View groups
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deleteviewGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteviewGroupsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteviewGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20132;

      return this.apiClient.callApi(
        '/viewGroups/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteviewGroupsByIdviews operation.
     * @callback moduleapi/ClientApi~deleteviewGroupsByIdviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200182{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a views from a viewGroups
     * View groups
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~deleteviewGroupsByIdviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deleteviewGroupsByIdviews(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deleteviewGroupsByIdviews");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteviewGroupsByIdviews");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200182;

      return this.apiClient.callApi(
        '/viewGroups/{idParent}/views/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllclientProfiles operation.
     * @callback moduleapi/ClientApi~getAllclientProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20042{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Client profile
     * Client profile
     * @param {module:api/ClientApi~getAllclientProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllclientProfiles(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20042;

      return this.apiClient.callApi(
        '/clientProfiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllgisMapLocations operation.
     * @callback moduleapi/ClientApi~getAllgisMapLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20061{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all GIS map locations
     * GIS map locations
     * @param {module:api/ClientApi~getAllgisMapLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllgisMapLocations(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20061;

      return this.apiClient.callApi(
        '/gisMapLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllayoutGroups operation.
     * @callback moduleapi/ClientApi~getAlllayoutGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20083{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all layoutGroups
     * Get array of all layoutGroups
     * @param {module:api/ClientApi~getAlllayoutGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllayoutGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20083;

      return this.apiClient.callApi(
        '/layoutGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllayoutsInAlayoutGroups operation.
     * @callback moduleapi/ClientApi~getAlllayoutsInAlayoutGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all layouts
     * Get array of all layouts
     * @param {String} id Id of the layoutGroup object
     * @param {module:api/ClientApi~getAlllayoutsInAlayoutGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllayoutsInAlayoutGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAlllayoutsInAlayoutGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20086;

      return this.apiClient.callApi(
        '/layoutGroups/{id}/layouts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmonitorPresetsInAmonitors operation.
     * @callback moduleapi/ClientApi~getAllmonitorPresetsInAmonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all monitorPresets
     * Monitor
     * @param {String} id Id of the monitor object
     * @param {module:api/ClientApi~getAllmonitorPresetsInAmonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmonitorPresetsInAmonitors(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmonitorPresetsInAmonitors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200114;

      return this.apiClient.callApi(
        '/monitors/{id}/monitorPresets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmonitorsInAvideoWalls operation.
     * @callback moduleapi/ClientApi~getAllmonitorsInAvideoWallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200176{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all monitors
     * Video wall
     * @param {String} id Id of the videoWall object
     * @param {module:api/ClientApi~getAllmonitorsInAvideoWallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmonitorsInAvideoWalls(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmonitorsInAvideoWalls");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200176;

      return this.apiClient.callApi(
        '/videoWalls/{id}/monitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllsaveSearches operation.
     * @callback moduleapi/ClientApi~getAllsaveSearchesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200143{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all saveSearches
     * Get array of all saveSearches
     * @param {module:api/ClientApi~getAllsaveSearchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllsaveSearches(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200143;

      return this.apiClient.callApi(
        '/saveSearches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllvideoWallPresets operation.
     * @callback moduleapi/ClientApi~getAllvideoWallPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200177{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Video wall preset
     * Video wall preset
     * @param {module:api/ClientApi~getAllvideoWallPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllvideoWallPresets(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200177;

      return this.apiClient.callApi(
        '/videoWallPresets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllvideoWallPresetsInAvideoWalls operation.
     * @callback moduleapi/ClientApi~getAllvideoWallPresetsInAvideoWallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200177{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all videoWallPresets
     * Video wall
     * @param {String} id Id of the videoWall object
     * @param {module:api/ClientApi~getAllvideoWallPresetsInAvideoWallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllvideoWallPresetsInAvideoWalls(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllvideoWallPresetsInAvideoWalls");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200177;

      return this.apiClient.callApi(
        '/videoWalls/{id}/videoWallPresets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllvideoWalls operation.
     * @callback moduleapi/ClientApi~getAllvideoWallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200169{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Video wall
     * Video wall
     * @param {module:api/ClientApi~getAllvideoWallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllvideoWalls(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200169;

      return this.apiClient.callApi(
        '/videoWalls', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllviewGroups operation.
     * @callback moduleapi/ClientApi~getAllviewGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200170{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all View groups
     * View groups
     * @param {module:api/ClientApi~getAllviewGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllviewGroups(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200170;

      return this.apiClient.callApi(
        '/viewGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllviewGroupsInAviewGroups operation.
     * @callback moduleapi/ClientApi~getAllviewGroupsInAviewGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200170{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all viewGroups
     * View groups
     * @param {String} id Id of the viewGroup object
     * @param {module:api/ClientApi~getAllviewGroupsInAviewGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllviewGroupsInAviewGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllviewGroupsInAviewGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200170;

      return this.apiClient.callApi(
        '/viewGroups/{id}/viewGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllviews operation.
     * @callback moduleapi/ClientApi~getAllviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200180{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all View folder
     * View folder
     * @param {module:api/ClientApi~getAllviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllviews(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200180;

      return this.apiClient.callApi(
        '/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllviewsInAviewGroups operation.
     * @callback moduleapi/ClientApi~getAllviewsInAviewGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200180{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all views
     * View groups
     * @param {String} id Id of the viewGroup object
     * @param {module:api/ClientApi~getAllviewsInAviewGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllviewsInAviewGroups(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllviewsInAviewGroups");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200180;

      return this.apiClient.callApi(
        '/viewGroups/{id}/views', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnelayoutsInAlayoutGroups operation.
     * @callback moduleapi/ClientApi~getOnelayoutsInAlayoutGroupsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20086{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific layouts
     * Get specific layouts
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~getOnelayoutsInAlayoutGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnelayoutsInAlayoutGroups(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnelayoutsInAlayoutGroups");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnelayoutsInAlayoutGroups");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20086;

      return this.apiClient.callApi(
        '/layoutGroups/{idParent}/layouts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemonitorPresetsInAmonitors operation.
     * @callback moduleapi/ClientApi~getOnemonitorPresetsInAmonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200114{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific monitorPresets
     * Monitor
     * @param {String} idParent Id of the monitor object
     * @param {String} id Id of the monitorPreset object
     * @param {module:api/ClientApi~getOnemonitorPresetsInAmonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemonitorPresetsInAmonitors(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemonitorPresetsInAmonitors");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemonitorPresetsInAmonitors");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200114;

      return this.apiClient.callApi(
        '/monitors/{idParent}/monitorPresets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getOnemonitorsInAvideoWalls operation.
     * @callback moduleapi/ClientApi~getOnemonitorsInAvideoWallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200176{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific monitors
     * Video wall
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/ClientApi~getOnemonitorsInAvideoWallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getOnemonitorsInAvideoWalls(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling getOnemonitorsInAvideoWalls");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getOnemonitorsInAvideoWalls");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200176;

      return this.apiClient.callApi(
        '/videoWalls/{idParent}/monitors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getclientProfilesById operation.
     * @callback moduleapi/ClientApi~getclientProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20043{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Client profile
     * Client profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getclientProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getclientProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getclientProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20043;

      return this.apiClient.callApi(
        '/clientProfiles/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getgisMapLocationsById operation.
     * @callback moduleapi/ClientApi~getgisMapLocationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20062{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of GIS map locations
     * GIS map locations
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getgisMapLocationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getgisMapLocationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getgisMapLocationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20062;

      return this.apiClient.callApi(
        '/gisMapLocations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getlayoutGroupsById operation.
     * @callback moduleapi/ClientApi~getlayoutGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20084{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of layoutGroups
     * Get specific object of layoutGroups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getlayoutGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getlayoutGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getlayoutGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20084;

      return this.apiClient.callApi(
        '/layoutGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getsaveSearchesById operation.
     * @callback moduleapi/ClientApi~getsaveSearchesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200145{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of saveSearches
     * Get specific object of saveSearches
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getsaveSearchesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getsaveSearchesById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getsaveSearchesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200145;

      return this.apiClient.callApi(
        '/saveSearches/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getvideoWallPresetsById operation.
     * @callback moduleapi/ClientApi~getvideoWallPresetsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200178{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Video wall preset
     * Video wall preset
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getvideoWallPresetsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getvideoWallPresetsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getvideoWallPresetsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200178;

      return this.apiClient.callApi(
        '/videoWallPresets/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getvideoWallsById operation.
     * @callback moduleapi/ClientApi~getvideoWallsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200175{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Video wall
     * Video wall
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getvideoWallsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getvideoWallsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getvideoWallsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200175;

      return this.apiClient.callApi(
        '/videoWalls/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getviewGroupsById operation.
     * @callback moduleapi/ClientApi~getviewGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200183{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of View groups
     * View groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getviewGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getviewGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getviewGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200183;

      return this.apiClient.callApi(
        '/viewGroups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getviewsById operation.
     * @callback moduleapi/ClientApi~getviewsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200181{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of View folder
     * View folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/ClientApi~getviewsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getviewsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getviewsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200181;

      return this.apiClient.callApi(
        '/views/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchclientProfilesById operation.
     * @callback moduleapi/ClientApi~patchclientProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Client profile
     * Client profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientProfiles} opts.body 
     * @param {module:api/ClientApi~patchclientProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchclientProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchclientProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/clientProfiles/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchgisMapLocationsById operation.
     * @callback moduleapi/ClientApi~patchgisMapLocationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on GIS map locations
     * GIS map locations
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GisMapLocations} opts.body 
     * @param {module:api/ClientApi~patchgisMapLocationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchgisMapLocationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchgisMapLocationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/gisMapLocations/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchlayoutGroupsById operation.
     * @callback moduleapi/ClientApi~patchlayoutGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on layoutGroups
     * Update provided fields on layoutGroups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LayoutGroups} opts.body 
     * @param {module:api/ClientApi~patchlayoutGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchlayoutGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchlayoutGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/layoutGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchsaveSearchesById operation.
     * @callback moduleapi/ClientApi~patchsaveSearchesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20124{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on saveSearches
     * Update provided fields on saveSearches
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveSearches} opts.body 
     * @param {module:api/ClientApi~patchsaveSearchesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchsaveSearchesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchsaveSearchesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20124;

      return this.apiClient.callApi(
        '/saveSearches/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchvideoWallPresetsById operation.
     * @callback moduleapi/ClientApi~patchvideoWallPresetsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Video wall preset
     * Video wall preset
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWallPresets} opts.body 
     * @param {module:api/ClientApi~patchvideoWallPresetsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchvideoWallPresetsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchvideoWallPresetsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20131;

      return this.apiClient.callApi(
        '/videoWallPresets/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchvideoWallsById operation.
     * @callback moduleapi/ClientApi~patchvideoWallsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Video wall
     * Video wall
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWalls} opts.body 
     * @param {module:api/ClientApi~patchvideoWallsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchvideoWallsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchvideoWallsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20129;

      return this.apiClient.callApi(
        '/videoWalls/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchviewGroupsById operation.
     * @callback moduleapi/ClientApi~patchviewGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20132{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on View groups
     * View groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ViewGroups} opts.body 
     * @param {module:api/ClientApi~patchviewGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchviewGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchviewGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20132;

      return this.apiClient.callApi(
        '/viewGroups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchviewsById operation.
     * @callback moduleapi/ClientApi~patchviewsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200182{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on View folder
     * View folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Views} opts.body 
     * @param {module:api/ClientApi~patchviewsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchviewsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchviewsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200182;

      return this.apiClient.callApi(
        '/views/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForclientProfiles operation.
     * @callback moduleapi/ClientApi~postTaskForclientProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Client profile
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ClientProfileUpPriority, or task&#x3D;ClientProfileDownPriority
     * @param {module:api/ClientApi~postTaskForclientProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForclientProfiles(id, task, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForclientProfiles");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForclientProfiles");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20017;

      return this.apiClient.callApi(
        '/clientProfiles/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskFormonitors operation.
     * @callback moduleapi/ClientApi~postTaskFormonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200115{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Monitor
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ApplyCameras, or task&#x3D;ApplyCamerasAndLayout, or task&#x3D;RemoveCameras, or task&#x3D;ApplyViewItemsXml, or task&#x3D;ApplyMonitorState, or task&#x3D;ApplyLayout, or task&#x3D;ApplyTextAndLayout
     * @param {Object} opts Optional parameters
     * @param {module:model/MonitorsIdBody} opts.body 
     * @param {module:api/ClientApi~postTaskFormonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskFormonitors(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskFormonitors");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskFormonitors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200115;

      return this.apiClient.callApi(
        '/monitors/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForvideoWallPresets operation.
     * @callback moduleapi/ClientApi~postTaskForvideoWallPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200179{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Video wall preset
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;Activate
     * @param {module:api/ClientApi~postTaskForvideoWallPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForvideoWallPresets(id, task, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForvideoWallPresets");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForvideoWallPresets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200179;

      return this.apiClient.callApi(
        '/videoWallPresets/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForvideoWalls operation.
     * @callback moduleapi/ClientApi~postTaskForvideoWallsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20080{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Video wall
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;ChangeSecurityPermissions
     * @param {Object} opts Optional parameters
     * @param {module:model/ChangeSecurityPermissionsRequestBody} opts.body 
     * @param {module:api/ClientApi~postTaskForvideoWallsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForvideoWalls(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForvideoWalls");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForvideoWalls");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20080;

      return this.apiClient.callApi(
        '/videoWalls/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postclientProfilesById operation.
     * @callback moduleapi/ClientApi~postclientProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new clientProfiles
     * Client profile
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientProfiles} opts.body 
     * @param {module:api/ClientApi~postclientProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postclientProfilesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/clientProfiles', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postgisMapLocationsById operation.
     * @callback moduleapi/ClientApi~postgisMapLocationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new gisMapLocations
     * GIS map locations
     * @param {Object} opts Optional parameters
     * @param {module:model/GisMapLocations} opts.body 
     * @param {module:api/ClientApi~postgisMapLocationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postgisMapLocationsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/gisMapLocations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postlayoutGroupsByIdlayouts operation.
     * @callback moduleapi/ClientApi~postlayoutGroupsByIdlayoutsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20113{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a layouts to a layoutGroups
     * Add a layouts to a layoutGroups
     * @param {String} id Id of the layoutGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Layouts} opts.body 
     * @param {module:api/ClientApi~postlayoutGroupsByIdlayoutsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postlayoutGroupsByIdlayouts(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postlayoutGroupsByIdlayouts");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20113;

      return this.apiClient.callApi(
        '/layoutGroups/{id}/layouts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postsaveSearchesById operation.
     * @callback moduleapi/ClientApi~postsaveSearchesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200144{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new saveSearches, or task&#x3D;UpdateSaveSearch, or task&#x3D;GetSaveSearch, or task&#x3D;FindSaveSearches
     * Add new saveSearches, or perform a task
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveSearchesBody} opts.body 
     * @param {module:api/ClientApi~postsaveSearchesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postsaveSearchesById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200144;

      return this.apiClient.callApi(
        '/saveSearches', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postvideoWallsById operation.
     * @callback moduleapi/ClientApi~postvideoWallsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new videoWalls
     * Video wall
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWalls} opts.body 
     * @param {module:api/ClientApi~postvideoWallsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postvideoWallsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20129;

      return this.apiClient.callApi(
        '/videoWalls', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postvideoWallsByIdmonitors operation.
     * @callback moduleapi/ClientApi~postvideoWallsByIdmonitorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20130{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a monitors to a videoWalls
     * Video wall
     * @param {String} id Id of the videoWall object
     * @param {Object} opts Optional parameters
     * @param {module:model/Monitors} opts.body 
     * @param {module:api/ClientApi~postvideoWallsByIdmonitorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postvideoWallsByIdmonitors(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postvideoWallsByIdmonitors");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20130;

      return this.apiClient.callApi(
        '/videoWalls/{id}/monitors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postvideoWallsByIdvideoWallPresets operation.
     * @callback moduleapi/ClientApi~postvideoWallsByIdvideoWallPresetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a videoWallPresets to a videoWalls
     * Video wall
     * @param {String} id Id of the videoWall object
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWallPresets} opts.body 
     * @param {module:api/ClientApi~postvideoWallsByIdvideoWallPresetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postvideoWallsByIdvideoWallPresets(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postvideoWallsByIdvideoWallPresets");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20131;

      return this.apiClient.callApi(
        '/videoWalls/{id}/videoWallPresets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postviewGroupsById operation.
     * @callback moduleapi/ClientApi~postviewGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20132{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new viewGroups
     * View groups
     * @param {Object} opts Optional parameters
     * @param {module:model/ViewGroups} opts.body 
     * @param {module:api/ClientApi~postviewGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postviewGroupsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20132;

      return this.apiClient.callApi(
        '/viewGroups', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postviewGroupsByIdviews operation.
     * @callback moduleapi/ClientApi~postviewGroupsByIdviewsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200182{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a views to a viewGroups
     * View groups
     * @param {String} id Id of the viewGroup object
     * @param {Object} opts Optional parameters
     * @param {module:model/Views} opts.body 
     * @param {module:api/ClientApi~postviewGroupsByIdviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postviewGroupsByIdviews(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postviewGroupsByIdviews");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200182;

      return this.apiClient.callApi(
        '/viewGroups/{id}/views', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putclientProfilesById operation.
     * @callback moduleapi/ClientApi~putclientProfilesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2017{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Client profile
     * Client profile
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ClientProfiles} opts.body 
     * @param {module:api/ClientApi~putclientProfilesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putclientProfilesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putclientProfilesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2017;

      return this.apiClient.callApi(
        '/clientProfiles/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putgisMapLocationsById operation.
     * @callback moduleapi/ClientApi~putgisMapLocationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on GIS map locations
     * GIS map locations
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/GisMapLocations} opts.body 
     * @param {module:api/ClientApi~putgisMapLocationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putgisMapLocationsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putgisMapLocationsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20111;

      return this.apiClient.callApi(
        '/gisMapLocations/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putlayoutGroupsById operation.
     * @callback moduleapi/ClientApi~putlayoutGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20085{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on layoutGroups
     * Update all fields on layoutGroups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LayoutGroups} opts.body 
     * @param {module:api/ClientApi~putlayoutGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putlayoutGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putlayoutGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20085;

      return this.apiClient.callApi(
        '/layoutGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putsaveSearchesById operation.
     * @callback moduleapi/ClientApi~putsaveSearchesByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20124{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on saveSearches
     * Update all fields on saveSearches
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/SaveSearches} opts.body 
     * @param {module:api/ClientApi~putsaveSearchesByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putsaveSearchesById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putsaveSearchesById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20124;

      return this.apiClient.callApi(
        '/saveSearches/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putvideoWallPresetsById operation.
     * @callback moduleapi/ClientApi~putvideoWallPresetsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20131{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Video wall preset
     * Video wall preset
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWallPresets} opts.body 
     * @param {module:api/ClientApi~putvideoWallPresetsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putvideoWallPresetsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putvideoWallPresetsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20131;

      return this.apiClient.callApi(
        '/videoWallPresets/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putvideoWallsById operation.
     * @callback moduleapi/ClientApi~putvideoWallsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20129{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Video wall
     * Video wall
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/VideoWalls} opts.body 
     * @param {module:api/ClientApi~putvideoWallsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putvideoWallsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putvideoWallsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20129;

      return this.apiClient.callApi(
        '/videoWalls/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putviewGroupsById operation.
     * @callback moduleapi/ClientApi~putviewGroupsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20132{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on View groups
     * View groups
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/ViewGroups} opts.body 
     * @param {module:api/ClientApi~putviewGroupsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putviewGroupsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putviewGroupsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20132;

      return this.apiClient.callApi(
        '/viewGroups/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putviewsById operation.
     * @callback moduleapi/ClientApi~putviewsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200182{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on View folder
     * View folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/Views} opts.body 
     * @param {module:api/ClientApi~putviewsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putviewsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putviewsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200182;

      return this.apiClient.callApi(
        '/views/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
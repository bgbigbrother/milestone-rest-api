/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {AccessControlSystems} from '../model/AccessControlSystems';
import {AccessControlUnits} from '../model/AccessControlUnits';
import {AlarmDefinitions} from '../model/AlarmDefinitions';
import {Error400} from '../model/Error400';
import {Error401} from '../model/Error401';
import {Error403} from '../model/Error403';
import {Error404} from '../model/Error404';
import {GetInternalUnitPathRequestBody} from '../model/GetInternalUnitPathRequestBody';
import {InlineResponse200} from '../model/InlineResponse200';
import {InlineResponse2001} from '../model/InlineResponse2001';
import {InlineResponse200108} from '../model/InlineResponse200108';
import {InlineResponse200109} from '../model/InlineResponse200109';
import {InlineResponse200110} from '../model/InlineResponse200110';
import {InlineResponse200111} from '../model/InlineResponse200111';
import {InlineResponse200112} from '../model/InlineResponse200112';
import {InlineResponse200113} from '../model/InlineResponse200113';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {InlineResponse2003} from '../model/InlineResponse2003';
import {InlineResponse2004} from '../model/InlineResponse2004';
import {InlineResponse2005} from '../model/InlineResponse2005';
import {InlineResponse2006} from '../model/InlineResponse2006';
import {InlineResponse2007} from '../model/InlineResponse2007';
import {InlineResponse2008} from '../model/InlineResponse2008';
import {InlineResponse20097} from '../model/InlineResponse20097';
import {InlineResponse20098} from '../model/InlineResponse20098';
import {InlineResponse20099} from '../model/InlineResponse20099';
import {InlineResponse201} from '../model/InlineResponse201';
import {InlineResponse20116} from '../model/InlineResponse20116';
import {InlineResponse20119} from '../model/InlineResponse20119';
import {LprMatchLists} from '../model/LprMatchLists';
import {LprMatchListsIdBody} from '../model/LprMatchListsIdBody';
import {MipItems} from '../model/MipItems';
import {MipKinds} from '../model/MipKinds';
import {MipKindsBody} from '../model/MipKindsBody';

/**
* VAP service.
* @module api/VAPApi
* @version 1.0.0
*/
export class VAPApi {

    /**
    * Constructs a new VAPApi. 
    * @alias module:api/VAPApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deletealarmDefinitionsById operation.
     * @callback moduleapi/VAPApi~deletealarmDefinitionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a alarmDefinitions
     * Alarm definitions
     * @param {String} id Id of the object
     * @param {module:api/VAPApi~deletealarmDefinitionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletealarmDefinitionsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletealarmDefinitionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/alarmDefinitions/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletelprMatchListsById operation.
     * @callback moduleapi/VAPApi~deletelprMatchListsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20116{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a lprMatchLists
     * Delete a lprMatchLists
     * @param {String} id Id of the object
     * @param {module:api/VAPApi~deletelprMatchListsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletelprMatchListsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletelprMatchListsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20116;

      return this.apiClient.callApi(
        '/lprMatchLists/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemipKindsById operation.
     * @callback moduleapi/VAPApi~deletemipKindsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20119{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a mipKinds
     * MIP kinds
     * @param {String} id Id of the object
     * @param {module:api/VAPApi~deletemipKindsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemipKindsById(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemipKindsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20119;

      return this.apiClient.callApi(
        '/mipKinds/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deletemipKindsByIdmipItems operation.
     * @callback moduleapi/VAPApi~deletemipKindsByIdmipItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a mipItems from a mipKinds
     * MIP kinds
     * @param {String} idParent Id of parent object
     * @param {String} id Id of the object
     * @param {module:api/VAPApi~deletemipKindsByIdmipItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    deletemipKindsByIdmipItems(idParent, id, callback) {
      
      let postBody = null;
      // verify the required parameter 'idParent' is set
      if (idParent === undefined || idParent === null) {
        throw new Error("Missing the required parameter 'idParent' when calling deletemipKindsByIdmipItems");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deletemipKindsByIdmipItems");
      }

      let pathParams = {
        'idParent': idParent,'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200110;

      return this.apiClient.callApi(
        '/mipKinds/{idParent}/mipItems/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaccessControlSystems operation.
     * @callback moduleapi/VAPApi~getAllaccessControlSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Access control systems
     * Access control systems
     * @param {module:api/VAPApi~getAllaccessControlSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaccessControlSystems(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/accessControlSystems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaccessControlUnits operation.
     * @callback moduleapi/VAPApi~getAllaccessControlUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all Access control units
     * Access control units
     * @param {module:api/VAPApi~getAllaccessControlUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaccessControlUnits(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/accessControlUnits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaccessControlUnitsInAaccessControlSystems operation.
     * @callback moduleapi/VAPApi~getAllaccessControlUnitsInAaccessControlSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all accessControlUnits
     * Access control systems
     * @param {String} id Id of the accessControlSystem object
     * @param {module:api/VAPApi~getAllaccessControlUnitsInAaccessControlSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaccessControlUnitsInAaccessControlSystems(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllaccessControlUnitsInAaccessControlSystems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/accessControlSystems/{id}/accessControlUnits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllaccessControlUnitsInAaccessControlUnits operation.
     * @callback moduleapi/VAPApi~getAllaccessControlUnitsInAaccessControlUnitsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all accessControlUnits
     * Access control units
     * @param {String} id Id of the accessControlUnit object
     * @param {module:api/VAPApi~getAllaccessControlUnitsInAaccessControlUnitsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllaccessControlUnitsInAaccessControlUnits(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllaccessControlUnitsInAaccessControlUnits");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/accessControlUnits/{id}/accessControlUnits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllalarmDefinitions operation.
     * @callback moduleapi/VAPApi~getAllalarmDefinitionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Alarm definitions
     * Alarm definitions. To include disabled items add ?disabled to the request.
     * @param {module:api/VAPApi~getAllalarmDefinitionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllalarmDefinitions(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/alarmDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAlllprMatchLists operation.
     * @callback moduleapi/VAPApi~getAlllprMatchListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20097{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all lprMatchLists
     * Get array of all lprMatchLists
     * @param {module:api/VAPApi~getAlllprMatchListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAlllprMatchLists(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20097;

      return this.apiClient.callApi(
        '/lprMatchLists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmipItems operation.
     * @callback moduleapi/VAPApi~getAllmipItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200108{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all enabled Item folder
     * Item folder. To include disabled items add ?disabled to the request.
     * @param {module:api/VAPApi~getAllmipItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmipItems(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200108;

      return this.apiClient.callApi(
        '/mipItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmipItemsInAmipItems operation.
     * @callback moduleapi/VAPApi~getAllmipItemsInAmipItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200108{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all mipItems
     * Item folder
     * @param {String} id Id of the mipItem object
     * @param {module:api/VAPApi~getAllmipItemsInAmipItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmipItemsInAmipItems(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmipItemsInAmipItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200108;

      return this.apiClient.callApi(
        '/mipItems/{id}/mipItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmipItemsInAmipKinds operation.
     * @callback moduleapi/VAPApi~getAllmipItemsInAmipKindsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200108{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all mipItems
     * MIP kinds
     * @param {String} id Id of the mipKind object
     * @param {module:api/VAPApi~getAllmipItemsInAmipKindsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmipItemsInAmipKinds(id, callback) {
      
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAllmipItemsInAmipKinds");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200108;

      return this.apiClient.callApi(
        '/mipKinds/{id}/mipItems', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getAllmipKinds operation.
     * @callback moduleapi/VAPApi~getAllmipKindsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200111{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get array of all MIP kinds
     * MIP kinds
     * @param {module:api/VAPApi~getAllmipKindsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getAllmipKinds(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200111;

      return this.apiClient.callApi(
        '/mipKinds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getaccessControlSystemsById operation.
     * @callback moduleapi/VAPApi~getaccessControlSystemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Access control systems
     * Access control systems
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getaccessControlSystemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getaccessControlSystemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getaccessControlSystemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/accessControlSystems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getaccessControlUnitsById operation.
     * @callback moduleapi/VAPApi~getaccessControlUnitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Access control units
     * Access control units
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getaccessControlUnitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getaccessControlUnitsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getaccessControlUnitsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/accessControlUnits/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getalarmDefinitionsById operation.
     * @callback moduleapi/VAPApi~getalarmDefinitionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2008{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Alarm definitions
     * Alarm definitions
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getalarmDefinitionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getalarmDefinitionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getalarmDefinitionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2008;

      return this.apiClient.callApi(
        '/alarmDefinitions/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getlprMatchListsById operation.
     * @callback moduleapi/VAPApi~getlprMatchListsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20098{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of lprMatchLists
     * Get specific object of lprMatchLists
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getlprMatchListsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getlprMatchListsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getlprMatchListsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse20098;

      return this.apiClient.callApi(
        '/lprMatchLists/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmipItemsById operation.
     * @callback moduleapi/VAPApi~getmipItemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200109{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of Item folder
     * Item folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getmipItemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmipItemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmipItemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200109;

      return this.apiClient.callApi(
        '/mipItems/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getmipKindsById operation.
     * @callback moduleapi/VAPApi~getmipKindsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200113{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific object of MIP kinds
     * MIP kinds
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {String} opts.tasks Get list of all tasks supported by this object
     * @param {module:api/VAPApi~getmipKindsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getmipKindsById(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getmipKindsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'tasks': opts['tasks']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200113;

      return this.apiClient.callApi(
        '/mipKinds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchaccessControlSystemsById operation.
     * @callback moduleapi/VAPApi~patchaccessControlSystemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Access control systems
     * Access control systems
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessControlSystems} opts.body 
     * @param {module:api/VAPApi~patchaccessControlSystemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchaccessControlSystemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchaccessControlSystemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/accessControlSystems/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchaccessControlUnitsById operation.
     * @callback moduleapi/VAPApi~patchaccessControlUnitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Access control units
     * Access control units
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessControlUnits} opts.body 
     * @param {module:api/VAPApi~patchaccessControlUnitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchaccessControlUnitsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchaccessControlUnitsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/accessControlUnits/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchalarmDefinitionsById operation.
     * @callback moduleapi/VAPApi~patchalarmDefinitionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Alarm definitions
     * Alarm definitions
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AlarmDefinitions} opts.body 
     * @param {module:api/VAPApi~patchalarmDefinitionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchalarmDefinitionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchalarmDefinitionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/alarmDefinitions/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchlprMatchListsById operation.
     * @callback moduleapi/VAPApi~patchlprMatchListsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20116{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on lprMatchLists
     * Update provided fields on lprMatchLists
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LprMatchLists} opts.body 
     * @param {module:api/VAPApi~patchlprMatchListsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchlprMatchListsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchlprMatchListsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20116;

      return this.apiClient.callApi(
        '/lprMatchLists/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmipItemsById operation.
     * @callback moduleapi/VAPApi~patchmipItemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on Item folder
     * Item folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MipItems} opts.body 
     * @param {module:api/VAPApi~patchmipItemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmipItemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmipItemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200110;

      return this.apiClient.callApi(
        '/mipItems/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the patchmipKindsById operation.
     * @callback moduleapi/VAPApi~patchmipKindsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20119{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update provided fields on MIP kinds
     * MIP kinds
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MipKinds} opts.body 
     * @param {module:api/VAPApi~patchmipKindsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    patchmipKindsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling patchmipKindsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20119;

      return this.apiClient.callApi(
        '/mipKinds/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForaccessControlSystems operation.
     * @callback moduleapi/VAPApi~postTaskForaccessControlSystemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Access control systems
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;GetInternalUnitPath
     * @param {Object} opts Optional parameters
     * @param {module:model/GetInternalUnitPathRequestBody} opts.body 
     * @param {module:api/VAPApi~postTaskForaccessControlSystemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForaccessControlSystems(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForaccessControlSystems");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForaccessControlSystems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/accessControlSystems/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postTaskForlprMatchLists operation.
     * @callback moduleapi/VAPApi~postTaskForlprMatchListsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20099{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a task
     * Perform one of 5 tasks
     * @param {String} id Id of the object
     * @param {String} task task&#x3D;MethodIdGetCustomFieldsForRegistrationNumber, or task&#x3D;MethodIdGetRegistrationNumbersInfo, or task&#x3D;MethodIdAddOrEditRegistrationNumbersInfo, or task&#x3D;MethodIdDeleteRegistrationNumbers, or task&#x3D;MethodIdDeleteAllRegistrationNumbers
     * @param {Object} opts Optional parameters
     * @param {module:model/LprMatchListsIdBody} opts.body 
     * @param {module:api/VAPApi~postTaskForlprMatchListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postTaskForlprMatchLists(id, task, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postTaskForlprMatchLists");
      }
      // verify the required parameter 'task' is set
      if (task === undefined || task === null) {
        throw new Error("Missing the required parameter 'task' when calling postTaskForlprMatchLists");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'task': task
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20099;

      return this.apiClient.callApi(
        '/lprMatchLists/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postalarmDefinitionsById operation.
     * @callback moduleapi/VAPApi~postalarmDefinitionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new alarmDefinitions
     * Alarm definitions
     * @param {Object} opts Optional parameters
     * @param {module:model/AlarmDefinitions} opts.body 
     * @param {module:api/VAPApi~postalarmDefinitionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postalarmDefinitionsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/alarmDefinitions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postlprMatchListsById operation.
     * @callback moduleapi/VAPApi~postlprMatchListsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20116{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new lprMatchLists
     * Add new lprMatchLists
     * @param {Object} opts Optional parameters
     * @param {module:model/LprMatchLists} opts.body 
     * @param {module:api/VAPApi~postlprMatchListsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postlprMatchListsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20116;

      return this.apiClient.callApi(
        '/lprMatchLists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmipKindsById operation.
     * @callback moduleapi/VAPApi~postmipKindsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200112{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add new mipKinds, or task&#x3D;GetMIPOptionProperty, or task&#x3D;SetMIPOptionProperty, or task&#x3D;MIPItemDataVersionSum
     * MIP kinds, or perform a task
     * @param {Object} opts Optional parameters
     * @param {module:model/MipKindsBody} opts.body 
     * @param {module:api/VAPApi~postmipKindsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmipKindsById(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200112;

      return this.apiClient.callApi(
        '/mipKinds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the postmipKindsByIdmipItems operation.
     * @callback moduleapi/VAPApi~postmipKindsByIdmipItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a mipItems to a mipKinds
     * MIP kinds
     * @param {String} id Id of the mipKind object
     * @param {Object} opts Optional parameters
     * @param {module:model/MipItems} opts.body 
     * @param {module:api/VAPApi~postmipKindsByIdmipItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    postmipKindsByIdmipItems(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postmipKindsByIdmipItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200110;

      return this.apiClient.callApi(
        '/mipKinds/{id}/mipItems', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putaccessControlSystemsById operation.
     * @callback moduleapi/VAPApi~putaccessControlSystemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Access control systems
     * Access control systems
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessControlSystems} opts.body 
     * @param {module:api/VAPApi~putaccessControlSystemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putaccessControlSystemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putaccessControlSystemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/accessControlSystems/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putaccessControlUnitsById operation.
     * @callback moduleapi/VAPApi~putaccessControlUnitsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Access control units
     * Access control units
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AccessControlUnits} opts.body 
     * @param {module:api/VAPApi~putaccessControlUnitsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putaccessControlUnitsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putaccessControlUnitsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/accessControlUnits/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putalarmDefinitionsById operation.
     * @callback moduleapi/VAPApi~putalarmDefinitionsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse201{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Alarm definitions
     * Alarm definitions
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/AlarmDefinitions} opts.body 
     * @param {module:api/VAPApi~putalarmDefinitionsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putalarmDefinitionsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putalarmDefinitionsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse201;

      return this.apiClient.callApi(
        '/alarmDefinitions/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putlprMatchListsById operation.
     * @callback moduleapi/VAPApi~putlprMatchListsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20116{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on lprMatchLists
     * Update all fields on lprMatchLists
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/LprMatchLists} opts.body 
     * @param {module:api/VAPApi~putlprMatchListsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putlprMatchListsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putlprMatchListsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20116;

      return this.apiClient.callApi(
        '/lprMatchLists/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmipItemsById operation.
     * @callback moduleapi/VAPApi~putmipItemsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200110{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on Item folder
     * Item folder
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MipItems} opts.body 
     * @param {module:api/VAPApi~putmipItemsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmipItemsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmipItemsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200110;

      return this.apiClient.callApi(
        '/mipItems/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the putmipKindsById operation.
     * @callback moduleapi/VAPApi~putmipKindsByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse20119{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update all fields on MIP kinds
     * MIP kinds
     * @param {String} id Id of the object
     * @param {Object} opts Optional parameters
     * @param {module:model/MipKinds} opts.body 
     * @param {module:api/VAPApi~putmipKindsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    putmipKindsById(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putmipKindsById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse20119;

      return this.apiClient.callApi(
        '/mipKinds/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
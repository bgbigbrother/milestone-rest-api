/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The ClientProfileGenerals model module.
 * @module model/ClientProfileGenerals
 * @version 1.0.0
 */
export class ClientProfileGenerals {
  /**
   * Constructs a new <code>ClientProfileGenerals</code>.
   * @alias module:model/ClientProfileGenerals
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>ClientProfileGenerals</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ClientProfileGenerals} obj Optional instance to populate.
   * @return {module:model/ClientProfileGenerals} The populated <code>ClientProfileGenerals</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ClientProfileGenerals();
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('generalTimeInTitlebar'))
        obj.generalTimeInTitlebar = ApiClient.convertToType(data['generalTimeInTitlebar'], 'String');
      if (data.hasOwnProperty('generalTimeInTitlebarLocked'))
        obj.generalTimeInTitlebarLocked = ApiClient.convertToType(data['generalTimeInTitlebarLocked'], 'Boolean');
      if (data.hasOwnProperty('generalTitleBar'))
        obj.generalTitleBar = ApiClient.convertToType(data['generalTitleBar'], 'String');
      if (data.hasOwnProperty('generalTitleBarLocked'))
        obj.generalTitleBarLocked = ApiClient.convertToType(data['generalTitleBarLocked'], 'Boolean');
      if (data.hasOwnProperty('generalHtmlViewItemScripting'))
        obj.generalHtmlViewItemScripting = ApiClient.convertToType(data['generalHtmlViewItemScripting'], 'String');
      if (data.hasOwnProperty('generalEmptySpaces'))
        obj.generalEmptySpaces = ApiClient.convertToType(data['generalEmptySpaces'], 'String');
      if (data.hasOwnProperty('generalEmptySpacesLocked'))
        obj.generalEmptySpacesLocked = ApiClient.convertToType(data['generalEmptySpacesLocked'], 'Boolean');
      if (data.hasOwnProperty('viewsCustomLogoInEmptySpaces'))
        obj.viewsCustomLogoInEmptySpaces = ApiClient.convertToType(data['viewsCustomLogoInEmptySpaces'], 'String');
      if (data.hasOwnProperty('generalCameraErrors'))
        obj.generalCameraErrors = ApiClient.convertToType(data['generalCameraErrors'], 'String');
      if (data.hasOwnProperty('generalCameraErrorsLocked'))
        obj.generalCameraErrorsLocked = ApiClient.convertToType(data['generalCameraErrorsLocked'], 'Boolean');
      if (data.hasOwnProperty('generalServerErrors'))
        obj.generalServerErrors = ApiClient.convertToType(data['generalServerErrors'], 'String');
      if (data.hasOwnProperty('generalServerErrorsLocked'))
        obj.generalServerErrorsLocked = ApiClient.convertToType(data['generalServerErrorsLocked'], 'Boolean');
      if (data.hasOwnProperty('generalCameraStoppedMessage'))
        obj.generalCameraStoppedMessage = ApiClient.convertToType(data['generalCameraStoppedMessage'], 'String');
      if (data.hasOwnProperty('generalCameraStoppedMessageLocked'))
        obj.generalCameraStoppedMessageLocked = ApiClient.convertToType(data['generalCameraStoppedMessageLocked'], 'Boolean');
      if (data.hasOwnProperty('generalViewGridSpacer'))
        obj.generalViewGridSpacer = ApiClient.convertToType(data['generalViewGridSpacer'], 'String');
      if (data.hasOwnProperty('generalViewGridSpacerLocked'))
        obj.generalViewGridSpacerLocked = ApiClient.convertToType(data['generalViewGridSpacerLocked'], 'Boolean');
      if (data.hasOwnProperty('generalApplicationMaximization'))
        obj.generalApplicationMaximization = ApiClient.convertToType(data['generalApplicationMaximization'], 'String');
      if (data.hasOwnProperty('generalApplicationMaximizationLocked'))
        obj.generalApplicationMaximizationLocked = ApiClient.convertToType(data['generalApplicationMaximizationLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationInactivityTimeout'))
        obj.applicationInactivityTimeout = ApiClient.convertToType(data['applicationInactivityTimeout'], 'Number');
      if (data.hasOwnProperty('generalDefaultImageQuality'))
        obj.generalDefaultImageQuality = ApiClient.convertToType(data['generalDefaultImageQuality'], 'String');
      if (data.hasOwnProperty('generalDefaultImageQualityLocked'))
        obj.generalDefaultImageQualityLocked = ApiClient.convertToType(data['generalDefaultImageQualityLocked'], 'Boolean');
      if (data.hasOwnProperty('generalDefaultFrameRate'))
        obj.generalDefaultFrameRate = ApiClient.convertToType(data['generalDefaultFrameRate'], 'String');
      if (data.hasOwnProperty('generalDefaultFrameRateLocked'))
        obj.generalDefaultFrameRateLocked = ApiClient.convertToType(data['generalDefaultFrameRateLocked'], 'Boolean');
      if (data.hasOwnProperty('generalDefaultVideoBuffer'))
        obj.generalDefaultVideoBuffer = ApiClient.convertToType(data['generalDefaultVideoBuffer'], 'String');
      if (data.hasOwnProperty('generalDefaultVideoBufferLocked'))
        obj.generalDefaultVideoBufferLocked = ApiClient.convertToType(data['generalDefaultVideoBufferLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationMinimizeButton'))
        obj.applicationMinimizeButton = ApiClient.convertToType(data['applicationMinimizeButton'], 'String');
      if (data.hasOwnProperty('applicationMaximizeButton'))
        obj.applicationMaximizeButton = ApiClient.convertToType(data['applicationMaximizeButton'], 'String');
      if (data.hasOwnProperty('applicationLogoutButton'))
        obj.applicationLogoutButton = ApiClient.convertToType(data['applicationLogoutButton'], 'String');
      if (data.hasOwnProperty('applicationExitButton'))
        obj.applicationExitButton = ApiClient.convertToType(data['applicationExitButton'], 'String');
      if (data.hasOwnProperty('applicationOptionsDialogButton'))
        obj.applicationOptionsDialogButton = ApiClient.convertToType(data['applicationOptionsDialogButton'], 'String');
      if (data.hasOwnProperty('applicationKeyboardSetup'))
        obj.applicationKeyboardSetup = ApiClient.convertToType(data['applicationKeyboardSetup'], 'String');
      if (data.hasOwnProperty('applicationJoystickSetup'))
        obj.applicationJoystickSetup = ApiClient.convertToType(data['applicationJoystickSetup'], 'String');
      if (data.hasOwnProperty('applicationRememberPassword'))
        obj.applicationRememberPassword = ApiClient.convertToType(data['applicationRememberPassword'], 'String');
      if (data.hasOwnProperty('applicationAutoLogin'))
        obj.applicationAutoLogin = ApiClient.convertToType(data['applicationAutoLogin'], 'String');
      if (data.hasOwnProperty('applicationStartMode'))
        obj.applicationStartMode = ApiClient.convertToType(data['applicationStartMode'], 'String');
      if (data.hasOwnProperty('applicationStartModeLocked'))
        obj.applicationStartModeLocked = ApiClient.convertToType(data['applicationStartModeLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationStartView'))
        obj.applicationStartView = ApiClient.convertToType(data['applicationStartView'], 'String');
      if (data.hasOwnProperty('applicationStartViewLocked'))
        obj.applicationStartViewLocked = ApiClient.convertToType(data['applicationStartViewLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationNewSCVersionWindow'))
        obj.applicationNewSCVersionWindow = ApiClient.convertToType(data['applicationNewSCVersionWindow'], 'String');
      if (data.hasOwnProperty('applicationNewSCVersionText'))
        obj.applicationNewSCVersionText = ApiClient.convertToType(data['applicationNewSCVersionText'], 'String');
      if (data.hasOwnProperty('generalDefaultPtzPointAndClickMode'))
        obj.generalDefaultPtzPointAndClickMode = ApiClient.convertToType(data['generalDefaultPtzPointAndClickMode'], 'String');
      if (data.hasOwnProperty('generalDefaultPtzPointAndClickModeLocked'))
        obj.generalDefaultPtzPointAndClickModeLocked = ApiClient.convertToType(data['generalDefaultPtzPointAndClickModeLocked'], 'Boolean');
      if (data.hasOwnProperty('systemMonitorTab'))
        obj.systemMonitorTab = ApiClient.convertToType(data['systemMonitorTab'], 'String');
      if (data.hasOwnProperty('centralizedSearchTab'))
        obj.centralizedSearchTab = ApiClient.convertToType(data['centralizedSearchTab'], 'String');
      if (data.hasOwnProperty('centralizedSearchMaxDeviceCount'))
        obj.centralizedSearchMaxDeviceCount = ApiClient.convertToType(data['centralizedSearchMaxDeviceCount'], 'String');
      if (data.hasOwnProperty('applicationHideMousePointerTimeout'))
        obj.applicationHideMousePointerTimeout = ApiClient.convertToType(data['applicationHideMousePointerTimeout'], 'String');
      if (data.hasOwnProperty('applicationHideMousePointerTimeoutLocked'))
        obj.applicationHideMousePointerTimeoutLocked = ApiClient.convertToType(data['applicationHideMousePointerTimeoutLocked'], 'Boolean');
      if (data.hasOwnProperty('alarmManagerTab'))
        obj.alarmManagerTab = ApiClient.convertToType(data['alarmManagerTab'], 'String');
      if (data.hasOwnProperty('applicationSnapshotAvailability'))
        obj.applicationSnapshotAvailability = ApiClient.convertToType(data['applicationSnapshotAvailability'], 'String');
      if (data.hasOwnProperty('applicationSnapshotAvailabilityLocked'))
        obj.applicationSnapshotAvailabilityLocked = ApiClient.convertToType(data['applicationSnapshotAvailabilityLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationSnapshotPath'))
        obj.applicationSnapshotPath = ApiClient.convertToType(data['applicationSnapshotPath'], 'String');
      if (data.hasOwnProperty('applicationSnapshotPathLocked'))
        obj.applicationSnapshotPathLocked = ApiClient.convertToType(data['applicationSnapshotPathLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationEvidenceLock'))
        obj.applicationEvidenceLock = ApiClient.convertToType(data['applicationEvidenceLock'], 'String');
      if (data.hasOwnProperty('applicationLiftPrivacyMaskTimeout'))
        obj.applicationLiftPrivacyMaskTimeout = ApiClient.convertToType(data['applicationLiftPrivacyMaskTimeout'], 'String');
      if (data.hasOwnProperty('applicationOnlineHelp'))
        obj.applicationOnlineHelp = ApiClient.convertToType(data['applicationOnlineHelp'], 'String');
      if (data.hasOwnProperty('applicationOnlineHelpLocked'))
        obj.applicationOnlineHelpLocked = ApiClient.convertToType(data['applicationOnlineHelpLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationVideoTutorials'))
        obj.applicationVideoTutorials = ApiClient.convertToType(data['applicationVideoTutorials'], 'String');
      if (data.hasOwnProperty('applicationVideoTutorialsLocked'))
        obj.applicationVideoTutorialsLocked = ApiClient.convertToType(data['applicationVideoTutorialsLocked'], 'Boolean');
      if (data.hasOwnProperty('applicationTransactTab'))
        obj.applicationTransactTab = ApiClient.convertToType(data['applicationTransactTab'], 'String');
    }
    return obj;
  }
}

/**
 * @member {String} displayName
 */
ClientProfileGenerals.prototype.displayName = undefined;

/**
 * Allowed values for the <code>generalTimeInTitlebar</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralTimeInTitlebarEnum = {
  /**
   * value: "Show"
   * @const
   */
  show: "Show",

  /**
   * value: "Hide"
   * @const
   */
  hide: "Hide"
};
/**
 * Show current time in title bar. Value map to display names:  Show=Show   Hide=Hide   
 * @member {module:model/ClientProfileGenerals.GeneralTimeInTitlebarEnum} generalTimeInTitlebar
 */
ClientProfileGenerals.prototype.generalTimeInTitlebar = undefined;

/**
 * Show current time in title bar (Locked)
 * @member {Boolean} generalTimeInTitlebarLocked
 */
ClientProfileGenerals.prototype.generalTimeInTitlebarLocked = undefined;

/**
 * Allowed values for the <code>generalTitleBar</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralTitleBarEnum = {
  /**
   * value: "Show"
   * @const
   */
  show: "Show",

  /**
   * value: "Hide"
   * @const
   */
  hide: "Hide"
};
/**
 * Default for camera title bar. Value map to display names:  Show=Show   Hide=Hide   
 * @member {module:model/ClientProfileGenerals.GeneralTitleBarEnum} generalTitleBar
 */
ClientProfileGenerals.prototype.generalTitleBar = undefined;

/**
 * Default for camera title bar (Locked)
 * @member {Boolean} generalTitleBarLocked
 */
ClientProfileGenerals.prototype.generalTitleBarLocked = undefined;

/**
 * Allowed values for the <code>generalHtmlViewItemScripting</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralHtmlViewItemScriptingEnum = {
  /**
   * value: "Enabled"
   * @const
   */
  enabled: "Enabled",

  /**
   * value: "Disabled"
   * @const
   */
  disabled: "Disabled"
};
/**
 * HTML view item scripting. Value map to display names:  Enabled=Enabled   Disabled=Disabled   
 * @member {module:model/ClientProfileGenerals.GeneralHtmlViewItemScriptingEnum} generalHtmlViewItemScripting
 */
ClientProfileGenerals.prototype.generalHtmlViewItemScripting = undefined;

/**
 * Allowed values for the <code>generalEmptySpaces</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralEmptySpacesEnum = {
  /**
   * value: "CompanyLogo"
   * @const
   */
  companyLogo: "CompanyLogo",

  /**
   * value: "CustomLogo"
   * @const
   */
  customLogo: "CustomLogo",

  /**
   * value: "Nothing"
   * @const
   */
  nothing: "Nothing",

  /**
   * value: "BlackImage"
   * @const
   */
  blackImage: "BlackImage"
};
/**
 * Show in empty view positions. Value map to display names:  CompanyLogo=Milestone logo   CustomLogo=Custom logo   Nothing=Nothing   BlackImage=Black image   
 * @member {module:model/ClientProfileGenerals.GeneralEmptySpacesEnum} generalEmptySpaces
 */
ClientProfileGenerals.prototype.generalEmptySpaces = undefined;

/**
 * Show in empty view positions (Locked)
 * @member {Boolean} generalEmptySpacesLocked
 */
ClientProfileGenerals.prototype.generalEmptySpacesLocked = undefined;

/**
 * Custom logo
 * @member {String} viewsCustomLogoInEmptySpaces
 */
ClientProfileGenerals.prototype.viewsCustomLogoInEmptySpaces = undefined;

/**
 * Allowed values for the <code>generalCameraErrors</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralCameraErrorsEnum = {
  /**
   * value: "ShowAsOverlay"
   * @const
   */
  showAsOverlay: "ShowAsOverlay",

  /**
   * value: "BlackImageWithOverlay"
   * @const
   */
  blackImageWithOverlay: "BlackImageWithOverlay",

  /**
   * value: "Hidden"
   * @const
   */
  hidden: "Hidden"
};
/**
 * Camera error messages. Value map to display names:  ShowAsOverlay=Show as overlay   BlackImageWithOverlay=Black image with overlay   Hidden=Hide (see the help)   
 * @member {module:model/ClientProfileGenerals.GeneralCameraErrorsEnum} generalCameraErrors
 */
ClientProfileGenerals.prototype.generalCameraErrors = undefined;

/**
 * Camera error messages (Locked)
 * @member {Boolean} generalCameraErrorsLocked
 */
ClientProfileGenerals.prototype.generalCameraErrorsLocked = undefined;

/**
 * Allowed values for the <code>generalServerErrors</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralServerErrorsEnum = {
  /**
   * value: "ShowAsOverlay"
   * @const
   */
  showAsOverlay: "ShowAsOverlay",

  /**
   * value: "Hidden"
   * @const
   */
  hidden: "Hidden"
};
/**
 * Server error messages. Value map to display names:  ShowAsOverlay=Show as overlay   Hidden=Hide   
 * @member {module:model/ClientProfileGenerals.GeneralServerErrorsEnum} generalServerErrors
 */
ClientProfileGenerals.prototype.generalServerErrors = undefined;

/**
 * Server error messages (Locked)
 * @member {Boolean} generalServerErrorsLocked
 */
ClientProfileGenerals.prototype.generalServerErrorsLocked = undefined;

/**
 * Allowed values for the <code>generalCameraStoppedMessage</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralCameraStoppedMessageEnum = {
  /**
   * value: "ShowAsOverlay"
   * @const
   */
  showAsOverlay: "ShowAsOverlay",

  /**
   * value: "BlackImageWithOverlay"
   * @const
   */
  blackImageWithOverlay: "BlackImageWithOverlay",

  /**
   * value: "Hidden"
   * @const
   */
  hidden: "Hidden"
};
/**
 * Live video stopped message. Value map to display names:  ShowAsOverlay=Show as overlay   BlackImageWithOverlay=Black image with overlay   Hidden=Hide (see the help)   
 * @member {module:model/ClientProfileGenerals.GeneralCameraStoppedMessageEnum} generalCameraStoppedMessage
 */
ClientProfileGenerals.prototype.generalCameraStoppedMessage = undefined;

/**
 * Live video stopped message (Locked)
 * @member {Boolean} generalCameraStoppedMessageLocked
 */
ClientProfileGenerals.prototype.generalCameraStoppedMessageLocked = undefined;

/**
 * Allowed values for the <code>generalViewGridSpacer</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralViewGridSpacerEnum = {
  /**
   * value: "Hide"
   * @const
   */
  hide: "Hide",

  /**
   * value: "Pixel1"
   * @const
   */
  pixel1: "Pixel1",

  /**
   * value: "Pixel2"
   * @const
   */
  pixel2: "Pixel2",

  /**
   * value: "Pixel3"
   * @const
   */
  pixel3: "Pixel3",

  /**
   * value: "Pixel4"
   * @const
   */
  pixel4: "Pixel4"
};
/**
 * View grid spacer. Value map to display names:  Hide=Hide   Pixel1=1 pixel   Pixel2=2 pixels   Pixel3=3 pixels   Pixel4=4 pixels   
 * @member {module:model/ClientProfileGenerals.GeneralViewGridSpacerEnum} generalViewGridSpacer
 */
ClientProfileGenerals.prototype.generalViewGridSpacer = undefined;

/**
 * View grid spacer (Locked)
 * @member {Boolean} generalViewGridSpacerLocked
 */
ClientProfileGenerals.prototype.generalViewGridSpacerLocked = undefined;

/**
 * Allowed values for the <code>generalApplicationMaximization</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralApplicationMaximizationEnum = {
  /**
   * value: "FullScreen"
   * @const
   */
  fullScreen: "FullScreen",

  /**
   * value: "NormalWindow"
   * @const
   */
  normalWindow: "NormalWindow"
};
/**
 * Application maximization. Value map to display names:  FullScreen=Maximize to full screen   NormalWindow=Maximize as normal window   
 * @member {module:model/ClientProfileGenerals.GeneralApplicationMaximizationEnum} generalApplicationMaximization
 */
ClientProfileGenerals.prototype.generalApplicationMaximization = undefined;

/**
 * Application maximization (Locked)
 * @member {Boolean} generalApplicationMaximizationLocked
 */
ClientProfileGenerals.prototype.generalApplicationMaximizationLocked = undefined;

/**
 * Inactive timeout (minutes)
 * @member {Number} applicationInactivityTimeout
 */
ClientProfileGenerals.prototype.applicationInactivityTimeout = undefined;

/**
 * Allowed values for the <code>generalDefaultImageQuality</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralDefaultImageQualityEnum = {
  /**
   * value: "Full"
   * @const
   */
  full: "Full",

  /**
   * value: "SuperHigh"
   * @const
   */
  superHigh: "SuperHigh",

  /**
   * value: "High"
   * @const
   */
  high: "High",

  /**
   * value: "Medium"
   * @const
   */
  medium: "Medium",

  /**
   * value: "Low"
   * @const
   */
  low: "Low"
};
/**
 * Default image quality. Value map to display names:  Full=Full   SuperHigh=Super high (for megapixel)   High=High   Medium=Medium   Low=Low   
 * @member {module:model/ClientProfileGenerals.GeneralDefaultImageQualityEnum} generalDefaultImageQuality
 */
ClientProfileGenerals.prototype.generalDefaultImageQuality = undefined;

/**
 * Default image quality (Locked)
 * @member {Boolean} generalDefaultImageQualityLocked
 */
ClientProfileGenerals.prototype.generalDefaultImageQualityLocked = undefined;

/**
 * Allowed values for the <code>generalDefaultFrameRate</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralDefaultFrameRateEnum = {
  /**
   * value: "Unlimited"
   * @const
   */
  unlimited: "Unlimited",

  /**
   * value: "Medium"
   * @const
   */
  medium: "Medium",

  /**
   * value: "Low"
   * @const
   */
  low: "Low"
};
/**
 * Default frame rate. Value map to display names:  Unlimited=Unrestricted   Medium=Medium   Low=Low   
 * @member {module:model/ClientProfileGenerals.GeneralDefaultFrameRateEnum} generalDefaultFrameRate
 */
ClientProfileGenerals.prototype.generalDefaultFrameRate = undefined;

/**
 * Default frame rate (Locked)
 * @member {Boolean} generalDefaultFrameRateLocked
 */
ClientProfileGenerals.prototype.generalDefaultFrameRateLocked = undefined;

/**
 * Allowed values for the <code>generalDefaultVideoBuffer</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralDefaultVideoBufferEnum = {
  /**
   * value: "Standard"
   * @const
   */
  standard: "Standard",

  /**
   * value: "Minimum"
   * @const
   */
  minimum: "Minimum",

  /**
   * value: "VerySmall"
   * @const
   */
  verySmall: "VerySmall",

  /**
   * value: "Small"
   * @const
   */
  small: "Small",

  /**
   * value: "Medium"
   * @const
   */
  medium: "Medium",

  /**
   * value: "Large"
   * @const
   */
  large: "Large",

  /**
   * value: "VeryLarge"
   * @const
   */
  veryLarge: "VeryLarge",

  /**
   * value: "Maximum"
   * @const
   */
  maximum: "Maximum"
};
/**
 * Default video buffer. Value map to display names:  Standard=Standard   Minimum=None   VerySmall=Very small – (50 milliseconds)   Small=Small – (100 milliseconds)   Medium=Medium – (½ second)   Large=Large – (1 second)   VeryLarge=Very large – (1.5 seconds)   Maximum=Maximum – (2 seconds)   
 * @member {module:model/ClientProfileGenerals.GeneralDefaultVideoBufferEnum} generalDefaultVideoBuffer
 */
ClientProfileGenerals.prototype.generalDefaultVideoBuffer = undefined;

/**
 * Default video buffer (Locked)
 * @member {Boolean} generalDefaultVideoBufferLocked
 */
ClientProfileGenerals.prototype.generalDefaultVideoBufferLocked = undefined;

/**
 * Allowed values for the <code>applicationMinimizeButton</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationMinimizeButtonEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Minimize button. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationMinimizeButtonEnum} applicationMinimizeButton
 */
ClientProfileGenerals.prototype.applicationMinimizeButton = undefined;

/**
 * Allowed values for the <code>applicationMaximizeButton</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationMaximizeButtonEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Maximize button. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationMaximizeButtonEnum} applicationMaximizeButton
 */
ClientProfileGenerals.prototype.applicationMaximizeButton = undefined;

/**
 * Allowed values for the <code>applicationLogoutButton</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationLogoutButtonEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Log Out button. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationLogoutButtonEnum} applicationLogoutButton
 */
ClientProfileGenerals.prototype.applicationLogoutButton = undefined;

/**
 * Allowed values for the <code>applicationExitButton</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationExitButtonEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Exit button. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationExitButtonEnum} applicationExitButton
 */
ClientProfileGenerals.prototype.applicationExitButton = undefined;

/**
 * Allowed values for the <code>applicationOptionsDialogButton</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationOptionsDialogButtonEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Settings dialog. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationOptionsDialogButtonEnum} applicationOptionsDialogButton
 */
ClientProfileGenerals.prototype.applicationOptionsDialogButton = undefined;

/**
 * Allowed values for the <code>applicationKeyboardSetup</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationKeyboardSetupEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Keyboard setup. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationKeyboardSetupEnum} applicationKeyboardSetup
 */
ClientProfileGenerals.prototype.applicationKeyboardSetup = undefined;

/**
 * Allowed values for the <code>applicationJoystickSetup</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationJoystickSetupEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Joystick setup. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationJoystickSetupEnum} applicationJoystickSetup
 */
ClientProfileGenerals.prototype.applicationJoystickSetup = undefined;

/**
 * Allowed values for the <code>applicationRememberPassword</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationRememberPasswordEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Remember password. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationRememberPasswordEnum} applicationRememberPassword
 */
ClientProfileGenerals.prototype.applicationRememberPassword = undefined;

/**
 * Allowed values for the <code>applicationAutoLogin</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationAutoLoginEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Auto-login. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationAutoLoginEnum} applicationAutoLogin
 */
ClientProfileGenerals.prototype.applicationAutoLogin = undefined;

/**
 * Allowed values for the <code>applicationStartMode</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationStartModeEnum = {
  /**
   * value: "FullScreen"
   * @const
   */
  fullScreen: "FullScreen",

  /**
   * value: "Maximized"
   * @const
   */
  maximized: "Maximized",

  /**
   * value: "Window"
   * @const
   */
  window: "Window",

  /**
   * value: "Last"
   * @const
   */
  last: "Last"
};
/**
 * Start mode. Value map to display names:  FullScreen=Full screen   Maximized=Maximized   Window=Window   Last=Last   
 * @member {module:model/ClientProfileGenerals.ApplicationStartModeEnum} applicationStartMode
 */
ClientProfileGenerals.prototype.applicationStartMode = undefined;

/**
 * Start mode (Locked)
 * @member {Boolean} applicationStartModeLocked
 */
ClientProfileGenerals.prototype.applicationStartModeLocked = undefined;

/**
 * Allowed values for the <code>applicationStartView</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationStartViewEnum = {
  /**
   * value: "Last"
   * @const
   */
  last: "Last",

  /**
   * value: "None"
   * @const
   */
  none: "None",

  /**
   * value: "Ask"
   * @const
   */
  ask: "Ask"
};
/**
 * Start view. Value map to display names:  Last=Last   None=None   Ask=Ask   
 * @member {module:model/ClientProfileGenerals.ApplicationStartViewEnum} applicationStartView
 */
ClientProfileGenerals.prototype.applicationStartView = undefined;

/**
 * Start view (Locked)
 * @member {Boolean} applicationStartViewLocked
 */
ClientProfileGenerals.prototype.applicationStartViewLocked = undefined;

/**
 * Allowed values for the <code>applicationNewSCVersionWindow</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationNewSCVersionWindowEnum = {
  /**
   * value: "Show"
   * @const
   */
  show: "Show",

  /**
   * value: "Hide"
   * @const
   */
  hide: "Hide"
};
/**
 * New version on server message. Value map to display names:  Show=Show   Hide=Hide   
 * @member {module:model/ClientProfileGenerals.ApplicationNewSCVersionWindowEnum} applicationNewSCVersionWindow
 */
ClientProfileGenerals.prototype.applicationNewSCVersionWindow = undefined;

/**
 * New version - additional message
 * @member {String} applicationNewSCVersionText
 */
ClientProfileGenerals.prototype.applicationNewSCVersionText = undefined;

/**
 * Allowed values for the <code>generalDefaultPtzPointAndClickMode</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.GeneralDefaultPtzPointAndClickModeEnum = {
  /**
   * value: "VirtualJoystick"
   * @const
   */
  virtualJoystick: "VirtualJoystick",

  /**
   * value: "ClickToCenter"
   * @const
   */
  clickToCenter: "ClickToCenter"
};
/**
 * Default PTZ click mode. Value map to display names:  VirtualJoystick=Virtual Joystick   ClickToCenter=Click-to-center   
 * @member {module:model/ClientProfileGenerals.GeneralDefaultPtzPointAndClickModeEnum} generalDefaultPtzPointAndClickMode
 */
ClientProfileGenerals.prototype.generalDefaultPtzPointAndClickMode = undefined;

/**
 * Default PTZ click mode (Locked)
 * @member {Boolean} generalDefaultPtzPointAndClickModeLocked
 */
ClientProfileGenerals.prototype.generalDefaultPtzPointAndClickModeLocked = undefined;

/**
 * Allowed values for the <code>systemMonitorTab</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.SystemMonitorTabEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * System Monitor tab. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.SystemMonitorTabEnum} systemMonitorTab
 */
ClientProfileGenerals.prototype.systemMonitorTab = undefined;

/**
 * Allowed values for the <code>centralizedSearchTab</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.CentralizedSearchTabEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Search tab. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.CentralizedSearchTabEnum} centralizedSearchTab
 */
ClientProfileGenerals.prototype.centralizedSearchTab = undefined;

/**
 * Allowed values for the <code>centralizedSearchMaxDeviceCount</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.CentralizedSearchMaxDeviceCountEnum = {
  /**
   * value: "Count_50"
   * @const
   */
  _50: "Count_50",

  /**
   * value: "Count_100"
   * @const
   */
  _100: "Count_100",

  /**
   * value: "Count_500"
   * @const
   */
  _500: "Count_500",

  /**
   * value: "Count_Unlimited"
   * @const
   */
  unlimited: "Count_Unlimited"
};
/**
 * Cameras allowed during search. Value map to display names:  Count_50=50   Count_100=100   Count_500=500   Count_Unlimited=Unrestricted   
 * @member {module:model/ClientProfileGenerals.CentralizedSearchMaxDeviceCountEnum} centralizedSearchMaxDeviceCount
 */
ClientProfileGenerals.prototype.centralizedSearchMaxDeviceCount = undefined;

/**
 * Allowed values for the <code>applicationHideMousePointerTimeout</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationHideMousePointerTimeoutEnum = {
  /**
   * value: "Disabled"
   * @const
   */
  disabled: "Disabled",

  /**
   * value: "Seconds_5"
   * @const
   */
  seconds5: "Seconds_5",

  /**
   * value: "Seconds_10"
   * @const
   */
  seconds10: "Seconds_10",

  /**
   * value: "Seconds_20"
   * @const
   */
  seconds20: "Seconds_20",

  /**
   * value: "Seconds_30"
   * @const
   */
  seconds30: "Seconds_30"
};
/**
 * Hide mouse pointer. Value map to display names:  Disabled=Never   Seconds_5=after 5 seconds   Seconds_10=after 10 seconds   Seconds_20=after 20 seconds   Seconds_30=after 30 seconds   
 * @member {module:model/ClientProfileGenerals.ApplicationHideMousePointerTimeoutEnum} applicationHideMousePointerTimeout
 */
ClientProfileGenerals.prototype.applicationHideMousePointerTimeout = undefined;

/**
 * Hide mouse pointer (Locked)
 * @member {Boolean} applicationHideMousePointerTimeoutLocked
 */
ClientProfileGenerals.prototype.applicationHideMousePointerTimeoutLocked = undefined;

/**
 * Allowed values for the <code>alarmManagerTab</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.AlarmManagerTabEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Alarm Manager tab. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.AlarmManagerTabEnum} alarmManagerTab
 */
ClientProfileGenerals.prototype.alarmManagerTab = undefined;

/**
 * Allowed values for the <code>applicationSnapshotAvailability</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationSnapshotAvailabilityEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Snapshot. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationSnapshotAvailabilityEnum} applicationSnapshotAvailability
 */
ClientProfileGenerals.prototype.applicationSnapshotAvailability = undefined;

/**
 * Snapshot (Locked)
 * @member {Boolean} applicationSnapshotAvailabilityLocked
 */
ClientProfileGenerals.prototype.applicationSnapshotAvailabilityLocked = undefined;

/**
 * Snapshot path
 * @member {String} applicationSnapshotPath
 */
ClientProfileGenerals.prototype.applicationSnapshotPath = undefined;

/**
 * Snapshot path (Locked)
 * @member {Boolean} applicationSnapshotPathLocked
 */
ClientProfileGenerals.prototype.applicationSnapshotPathLocked = undefined;

/**
 * Allowed values for the <code>applicationEvidenceLock</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationEvidenceLockEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Evidence lock. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationEvidenceLockEnum} applicationEvidenceLock
 */
ClientProfileGenerals.prototype.applicationEvidenceLock = undefined;

/**
 * Allowed values for the <code>applicationLiftPrivacyMaskTimeout</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationLiftPrivacyMaskTimeoutEnum = {
  /**
   * value: "Minutes_2"
   * @const
   */
  minutes2: "Minutes_2",

  /**
   * value: "Minutes_10"
   * @const
   */
  minutes10: "Minutes_10",

  /**
   * value: "Minutes_30"
   * @const
   */
  minutes30: "Minutes_30",

  /**
   * value: "Minutes_60"
   * @const
   */
  minutes60: "Minutes_60",

  /**
   * value: "Minutes_120"
   * @const
   */
  minutes120: "Minutes_120",

  /**
   * value: "Until_Logout"
   * @const
   */
  untilLogout: "Until_Logout"
};
/**
 * Lift privacy masks timeout. Value map to display names:  Minutes_2=2 minutes   Minutes_10=10 minutes   Minutes_30=30 minutes   Minutes_60=1 hour   Minutes_120=2 hours   Until_Logout=Until logged out   
 * @member {module:model/ClientProfileGenerals.ApplicationLiftPrivacyMaskTimeoutEnum} applicationLiftPrivacyMaskTimeout
 */
ClientProfileGenerals.prototype.applicationLiftPrivacyMaskTimeout = undefined;

/**
 * Allowed values for the <code>applicationOnlineHelp</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationOnlineHelpEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Online help. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationOnlineHelpEnum} applicationOnlineHelp
 */
ClientProfileGenerals.prototype.applicationOnlineHelp = undefined;

/**
 * Online help (Locked)
 * @member {Boolean} applicationOnlineHelpLocked
 */
ClientProfileGenerals.prototype.applicationOnlineHelpLocked = undefined;

/**
 * Allowed values for the <code>applicationVideoTutorials</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationVideoTutorialsEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Video tutorials. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationVideoTutorialsEnum} applicationVideoTutorials
 */
ClientProfileGenerals.prototype.applicationVideoTutorials = undefined;

/**
 * Video tutorials (Locked)
 * @member {Boolean} applicationVideoTutorialsLocked
 */
ClientProfileGenerals.prototype.applicationVideoTutorialsLocked = undefined;

/**
 * Allowed values for the <code>applicationTransactTab</code> property.
 * @enum {String}
 * @readonly
 */
ClientProfileGenerals.ApplicationTransactTabEnum = {
  /**
   * value: "Available"
   * @const
   */
  available: "Available",

  /**
   * value: "Unavailable"
   * @const
   */
  unavailable: "Unavailable"
};
/**
 * Transact tab. Value map to display names:  Available=Available   Unavailable=Unavailable   
 * @member {module:model/ClientProfileGenerals.ApplicationTransactTabEnum} applicationTransactTab
 */
ClientProfileGenerals.prototype.applicationTransactTab = undefined;


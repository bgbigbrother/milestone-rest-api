/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {UsersRelations} from './UsersRelations';

/**
 * The Users model module.
 * @module model/Users
 * @version 1.0.0
 */
export class Users {
  /**
   * Constructs a new <code>Users</code>.
   * Basic user
   * @alias module:model/Users
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Users</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Users} obj Optional instance to populate.
   * @return {module:model/Users} The populated <code>Users</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Users();
      if (data.hasOwnProperty('sid'))
        obj.sid = ApiClient.convertToType(data['sid'], 'String');
      if (data.hasOwnProperty('identityType'))
        obj.identityType = ApiClient.convertToType(data['identityType'], 'String');
      if (data.hasOwnProperty('accountName'))
        obj.accountName = ApiClient.convertToType(data['accountName'], 'String');
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('domain'))
        obj.domain = ApiClient.convertToType(data['domain'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('memberOf'))
        obj.memberOf = ApiClient.convertToType(data['memberOf'], 'String');
      if (data.hasOwnProperty('memberOfRoles'))
        obj.memberOfRoles = ApiClient.convertToType(data['memberOfRoles'], 'String');
      if (data.hasOwnProperty('members'))
        obj.members = ApiClient.convertToType(data['members'], 'String');
      if (data.hasOwnProperty('relations'))
        obj.relations = UsersRelations.constructFromObject(data['relations']);
    }
    return obj;
  }
}

/**
 * SID
 * @member {String} sid
 */
Users.prototype.sid = undefined;

/**
 * Allowed values for the <code>identityType</code> property.
 * @enum {String}
 * @readonly
 */
Users.IdentityTypeEnum = {
  /**
   * value: "InvalidIdentity"
   * @const
   */
  invalidIdentity: "InvalidIdentity",

  /**
   * value: "UnknownIdentityType"
   * @const
   */
  unknownIdentityType: "UnknownIdentityType",

  /**
   * value: "WindowsUser"
   * @const
   */
  windowsUser: "WindowsUser",

  /**
   * value: "WindowsGroup"
   * @const
   */
  windowsGroup: "WindowsGroup",

  /**
   * value: "Role"
   * @const
   */
  role: "Role",

  /**
   * value: "BasicUser"
   * @const
   */
  basicUser: "BasicUser"
};
/**
 * User type. Value map to display names:  InvalidIdentity=InvalidIdentity   UnknownIdentityType=UnknownIdentityType   WindowsUser=WindowsUser   WindowsGroup=WindowsGroup   Role=Role   BasicUser=BasicUser   
 * @member {module:model/Users.IdentityTypeEnum} identityType
 */
Users.prototype.identityType = undefined;

/**
 * Account name
 * @member {String} accountName
 */
Users.prototype.accountName = undefined;

/**
 * Role display name
 * @member {String} displayName
 */
Users.prototype.displayName = undefined;

/**
 * Domain
 * @member {String} domain
 */
Users.prototype.domain = undefined;

/**
 * Description
 * @member {String} description
 */
Users.prototype.description = undefined;

/**
 * Member of groups. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
 * @member {String} memberOf
 */
Users.prototype.memberOf = undefined;

/**
 * Member of roles. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
 * @member {String} memberOfRoles
 */
Users.prototype.memberOfRoles = undefined;

/**
 * Members. Only filled when getting specific user, call the GetItem(item.Path) to fill the property
 * @member {String} members
 */
Users.prototype.members = undefined;

/**
 * @member {module:model/UsersRelations} relations
 */
Users.prototype.relations = undefined;


/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The HardwareScanExpressServerTask model module.
 * @module model/HardwareScanExpressServerTask
 * @version 1.0.0
 */
export class HardwareScanExpressServerTask {
  /**
   * Constructs a new <code>HardwareScanExpressServerTask</code>.
   * Detect hardware
   * @alias module:model/HardwareScanExpressServerTask
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>HardwareScanExpressServerTask</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/HardwareScanExpressServerTask} obj Optional instance to populate.
   * @return {module:model/HardwareScanExpressServerTask} The populated <code>HardwareScanExpressServerTask</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new HardwareScanExpressServerTask();
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('primaryUserName'))
        obj.primaryUserName = ApiClient.convertToType(data['primaryUserName'], 'String');
      if (data.hasOwnProperty('primaryPassword'))
        obj.primaryPassword = ApiClient.convertToType(data['primaryPassword'], 'String');
      if (data.hasOwnProperty('secondaryUserName'))
        obj.secondaryUserName = ApiClient.convertToType(data['secondaryUserName'], 'String');
      if (data.hasOwnProperty('secondaryPassword'))
        obj.secondaryPassword = ApiClient.convertToType(data['secondaryPassword'], 'String');
      if (data.hasOwnProperty('tertiaryUserName'))
        obj.tertiaryUserName = ApiClient.convertToType(data['tertiaryUserName'], 'String');
      if (data.hasOwnProperty('tertiaryPassword'))
        obj.tertiaryPassword = ApiClient.convertToType(data['tertiaryPassword'], 'String');
      if (data.hasOwnProperty('useDefaultCredentials'))
        obj.useDefaultCredentials = ApiClient.convertToType(data['useDefaultCredentials'], 'Boolean');
      if (data.hasOwnProperty('useSecurePort'))
        obj.useSecurePort = ApiClient.convertToType(data['useSecurePort'], 'Boolean');
    }
    return obj;
  }
}

/**
 * @member {Boolean} enabled
 */
HardwareScanExpressServerTask.prototype.enabled = undefined;

/**
 * @member {String} displayName
 */
HardwareScanExpressServerTask.prototype.displayName = undefined;

/**
 * User name. User name for the hardware
 * @member {String} primaryUserName
 */
HardwareScanExpressServerTask.prototype.primaryUserName = undefined;

/**
 * Password. Password for hardware
 * @member {String} primaryPassword
 */
HardwareScanExpressServerTask.prototype.primaryPassword = undefined;

/**
 * User name. User name for the hardware
 * @member {String} secondaryUserName
 */
HardwareScanExpressServerTask.prototype.secondaryUserName = undefined;

/**
 * Password. Password for hardware
 * @member {String} secondaryPassword
 */
HardwareScanExpressServerTask.prototype.secondaryPassword = undefined;

/**
 * User name. User name for the hardware
 * @member {String} tertiaryUserName
 */
HardwareScanExpressServerTask.prototype.tertiaryUserName = undefined;

/**
 * Password. Password for hardware
 * @member {String} tertiaryPassword
 */
HardwareScanExpressServerTask.prototype.tertiaryPassword = undefined;

/**
 * Use default credentials. Specify if you want to use the default hardware credentials or use another one.
 * @member {Boolean} useDefaultCredentials
 */
HardwareScanExpressServerTask.prototype.useDefaultCredentials = undefined;

/**
 * Use HTTPS. Specify if you want to use the HTTPS protocol to connect to the hardware.
 * @member {Boolean} useSecurePort
 */
HardwareScanExpressServerTask.prototype.useSecurePort = undefined;

// Implement OneOfinlineResponse200125Result interface:

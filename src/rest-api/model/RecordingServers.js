/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {RecordingServersRelations} from './RecordingServersRelations';

/**
 * The RecordingServers model module.
 * @module model/RecordingServers
 * @version 1.0.0
 */
export class RecordingServers {
  /**
   * Constructs a new <code>RecordingServers</code>.
   * Recording Server
   * @alias module:model/RecordingServers
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>RecordingServers</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RecordingServers} obj Optional instance to populate.
   * @return {module:model/RecordingServers} The populated <code>RecordingServers</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RecordingServers();
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('description'))
        obj.description = ApiClient.convertToType(data['description'], 'String');
      if (data.hasOwnProperty('lastModified'))
        obj.lastModified = ApiClient.convertToType(data['lastModified'], 'String');
      if (data.hasOwnProperty('synchronizationTime'))
        obj.synchronizationTime = ApiClient.convertToType(data['synchronizationTime'], 'Number');
      if (data.hasOwnProperty('timeZoneName'))
        obj.timeZoneName = ApiClient.convertToType(data['timeZoneName'], 'String');
      if (data.hasOwnProperty('hostName'))
        obj.hostName = ApiClient.convertToType(data['hostName'], 'String');
      if (data.hasOwnProperty('portNumber'))
        obj.portNumber = ApiClient.convertToType(data['portNumber'], 'Number');
      if (data.hasOwnProperty('webServerUri'))
        obj.webServerUri = ApiClient.convertToType(data['webServerUri'], 'String');
      if (data.hasOwnProperty('activeWebServerUri'))
        obj.activeWebServerUri = ApiClient.convertToType(data['activeWebServerUri'], 'String');
      if (data.hasOwnProperty('publicAccessEnabled'))
        obj.publicAccessEnabled = ApiClient.convertToType(data['publicAccessEnabled'], 'Boolean');
      if (data.hasOwnProperty('publicWebserverHostName'))
        obj.publicWebserverHostName = ApiClient.convertToType(data['publicWebserverHostName'], 'String');
      if (data.hasOwnProperty('publicWebserverPort'))
        obj.publicWebserverPort = ApiClient.convertToType(data['publicWebserverPort'], 'Number');
      if (data.hasOwnProperty('multicastServerAddress'))
        obj.multicastServerAddress = ApiClient.convertToType(data['multicastServerAddress'], 'String');
      if (data.hasOwnProperty('shutdownOnStorageFailure'))
        obj.shutdownOnStorageFailure = ApiClient.convertToType(data['shutdownOnStorageFailure'], 'Boolean');
      if (data.hasOwnProperty('relations'))
        obj.relations = RecordingServersRelations.constructFromObject(data['relations']);
    }
    return obj;
  }
}

/**
 * @member {Boolean} enabled
 */
RecordingServers.prototype.enabled = undefined;

/**
 * @member {String} displayName
 */
RecordingServers.prototype.displayName = undefined;

/**
 * ID
 * @member {String} id
 */
RecordingServers.prototype.id = undefined;

/**
 * Name
 * @member {String} name
 */
RecordingServers.prototype.name = undefined;

/**
 * Description
 * @member {String} description
 */
RecordingServers.prototype.description = undefined;

/**
 * Last modified
 * @member {String} lastModified
 */
RecordingServers.prototype.lastModified = undefined;

/**
 * Synchronization time. Defines when the configuration is synchronized with the hardware. Define when to start the synchronization by entering a number of minutes after midnight (local time of recording server). The default value is -1, which means no synchronization.
 * @member {Number} synchronizationTime
 */
RecordingServers.prototype.synchronizationTime = undefined;

/**
 * Time zone
 * @member {String} timeZoneName
 */
RecordingServers.prototype.timeZoneName = undefined;

/**
 * Host name. Host name  of the recording server (deprecated, use *Web Server Uri*)
 * @member {String} hostName
 */
RecordingServers.prototype.hostName = undefined;

/**
 * Port number. Port number of the recording server (deprecated, use *Web Server Uri*)
 * @member {Number} portNumber
 */
RecordingServers.prototype.portNumber = undefined;

/**
 * Web Server Uri. Web Server Uri of the recording server
 * @member {String} webServerUri
 */
RecordingServers.prototype.webServerUri = undefined;

/**
 * Active Public Web server URI . Currently active public web server address 
 * @member {String} activeWebServerUri
 */
RecordingServers.prototype.activeWebServerUri = undefined;

/**
 * Public address enabled. Enable or disable the public address
 * @member {Boolean} publicAccessEnabled
 */
RecordingServers.prototype.publicAccessEnabled = undefined;

/**
 * Public recording server address. Public recording server address
 * @member {String} publicWebserverHostName
 */
RecordingServers.prototype.publicWebserverHostName = undefined;

/**
 * Public recording server port. Public recording server port
 * @member {Number} publicWebserverPort
 */
RecordingServers.prototype.publicWebserverPort = undefined;

/**
 * Multicast server address. Multicast server address
 * @member {String} multicastServerAddress
 */
RecordingServers.prototype.multicastServerAddress = undefined;

/**
 * Shutdown on storage failure. Shutdown on storage failure
 * @member {Boolean} shutdownOnStorageFailure
 */
RecordingServers.prototype.shutdownOnStorageFailure = undefined;

/**
 * @member {module:model/RecordingServersRelations} relations
 */
RecordingServers.prototype.relations = undefined;


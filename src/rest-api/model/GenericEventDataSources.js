/*
 * Milestone Integration Platform VMS RESTful API
 * VMS Configuration and control for XProtect
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.35
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {GenericEventDataSourcesRelations} from './GenericEventDataSourcesRelations';

/**
 * The GenericEventDataSources model module.
 * @module model/GenericEventDataSources
 * @version 1.0.0
 */
export class GenericEventDataSources {
  /**
   * Constructs a new <code>GenericEventDataSources</code>.
   * Generic event data sources
   * @alias module:model/GenericEventDataSources
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>GenericEventDataSources</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GenericEventDataSources} obj Optional instance to populate.
   * @return {module:model/GenericEventDataSources} The populated <code>GenericEventDataSources</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GenericEventDataSources();
      if (data.hasOwnProperty('enabled'))
        obj.enabled = ApiClient.convertToType(data['enabled'], 'Boolean');
      if (data.hasOwnProperty('displayName'))
        obj.displayName = ApiClient.convertToType(data['displayName'], 'String');
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('name'))
        obj.name = ApiClient.convertToType(data['name'], 'String');
      if (data.hasOwnProperty('dataSourcePort'))
        obj.dataSourcePort = ApiClient.convertToType(data['dataSourcePort'], 'Number');
      if (data.hasOwnProperty('dataSourceSeparator'))
        obj.dataSourceSeparator = ApiClient.convertToType(data['dataSourceSeparator'], 'String');
      if (data.hasOwnProperty('dataSourceEncoding'))
        obj.dataSourceEncoding = ApiClient.convertToType(data['dataSourceEncoding'], 'Number');
      if (data.hasOwnProperty('dataSourceLog'))
        obj.dataSourceLog = ApiClient.convertToType(data['dataSourceLog'], 'Boolean');
      if (data.hasOwnProperty('dataSourceEcho'))
        obj.dataSourceEcho = ApiClient.convertToType(data['dataSourceEcho'], 'String');
      if (data.hasOwnProperty('dataSourceAllowed'))
        obj.dataSourceAllowed = ApiClient.convertToType(data['dataSourceAllowed'], 'String');
      if (data.hasOwnProperty('dataSourceAllowed6'))
        obj.dataSourceAllowed6 = ApiClient.convertToType(data['dataSourceAllowed6'], 'String');
      if (data.hasOwnProperty('dataSourceProtocol'))
        obj.dataSourceProtocol = ApiClient.convertToType(data['dataSourceProtocol'], 'String');
      if (data.hasOwnProperty('dataSourceAddressFamily'))
        obj.dataSourceAddressFamily = ApiClient.convertToType(data['dataSourceAddressFamily'], 'String');
      if (data.hasOwnProperty('relations'))
        obj.relations = GenericEventDataSourcesRelations.constructFromObject(data['relations']);
    }
    return obj;
  }
}

/**
 * @member {Boolean} enabled
 */
GenericEventDataSources.prototype.enabled = undefined;

/**
 * @member {String} displayName
 */
GenericEventDataSources.prototype.displayName = undefined;

/**
 * ID
 * @member {String} id
 */
GenericEventDataSources.prototype.id = undefined;

/**
 * Name
 * @member {String} name
 */
GenericEventDataSources.prototype.name = undefined;

/**
 * Port
 * @member {Number} dataSourcePort
 */
GenericEventDataSources.prototype.dataSourcePort = undefined;

/**
 * Separator bytes
 * @member {String} dataSourceSeparator
 */
GenericEventDataSources.prototype.dataSourceSeparator = undefined;

/**
 * Encoding (code page)
 * @member {Number} dataSourceEncoding
 */
GenericEventDataSources.prototype.dataSourceEncoding = undefined;

/**
 * Write to log
 * @member {Boolean} dataSourceLog
 */
GenericEventDataSources.prototype.dataSourceLog = undefined;

/**
 * Allowed values for the <code>dataSourceEcho</code> property.
 * @enum {String}
 * @readonly
 */
GenericEventDataSources.DataSourceEchoEnum = {
  /**
   * value: "Full"
   * @const
   */
  full: "Full",

  /**
   * value: "Statistics"
   * @const
   */
  statistics: "Statistics",

  /**
   * value: "None"
   * @const
   */
  none: "None"
};
/**
 * Echo type selector. Value map to display names:  Full=Echo all bytes   Statistics=Echo statistics   None=No echo   
 * @member {module:model/GenericEventDataSources.DataSourceEchoEnum} dataSourceEcho
 */
GenericEventDataSources.prototype.dataSourceEcho = undefined;

/**
 * Allowed external IPv4 addresses
 * @member {String} dataSourceAllowed
 */
GenericEventDataSources.prototype.dataSourceAllowed = undefined;

/**
 * Allowed external IPv6 addresses
 * @member {String} dataSourceAllowed6
 */
GenericEventDataSources.prototype.dataSourceAllowed6 = undefined;

/**
 * Allowed values for the <code>dataSourceProtocol</code> property.
 * @enum {String}
 * @readonly
 */
GenericEventDataSources.DataSourceProtocolEnum = {
  /**
   * value: "Tcp"
   * @const
   */
  tcp: "Tcp",

  /**
   * value: "Udp"
   * @const
   */
  udp: "Udp",

  /**
   * value: "Both"
   * @const
   */
  both: "Both"
};
/**
 * Protocol type(s). Value map to display names:  Tcp=TCP   Udp=UDP   Both=TCP and UDP   
 * @member {module:model/GenericEventDataSources.DataSourceProtocolEnum} dataSourceProtocol
 */
GenericEventDataSources.prototype.dataSourceProtocol = undefined;

/**
 * Allowed values for the <code>dataSourceAddressFamily</code> property.
 * @enum {String}
 * @readonly
 */
GenericEventDataSources.DataSourceAddressFamilyEnum = {
  /**
   * value: "InterNetwork"
   * @const
   */
  interNetwork: "InterNetwork",

  /**
   * value: "InterNetworkV6"
   * @const
   */
  interNetworkV6: "InterNetworkV6",

  /**
   * value: "Both"
   * @const
   */
  both: "Both"
};
/**
 * IP address family. Value map to display names:  InterNetwork=IPv4   InterNetworkV6=IPv6   Both=IPv4 and IPv6   
 * @member {module:model/GenericEventDataSources.DataSourceAddressFamilyEnum} dataSourceAddressFamily
 */
GenericEventDataSources.prototype.dataSourceAddressFamily = undefined;

/**
 * @member {module:model/GenericEventDataSourcesRelations} relations
 */
GenericEventDataSources.prototype.relations = undefined;

